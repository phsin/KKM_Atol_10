//Класс Общие.Форма.Привязка2
//Автор: Дмитрий Ощепков (DmitrO)
//Доработано: Дмитрий Трапезников (trad)
//Версия: 2.0 (trad mod)

//класс Общие.Форма.Привязка2=Classes\Общие.Форма.Привязка2.ert : РасширениеФормы
//{
//	void Привязка(Строка ИДЭлемента, Строка ТипВ="", Строка ИДЭлементаВ="", Строка ТипГ="", Строка ИДЭлементаГ="");
//	void УстановитьФорму(РасширяемаяФорма);
//	void ПриИзмененииРазмераОкна(ТипСобытия, ШиринаФормы, ВысотаФормы);
//	void ПослеОткрытия();
//	void Сбросить();
//	void Выровнять(ИДЭлемента, Граница, ИДЭлементаЦель, ГраницаЦель, Отступ);
//	void Привязать();
//};
Перем ТипАтрибутаПоНомеру[20];
Перем ТПривязки;
Перем Флаг;

Перем ВысотаПривязки;
Перем ШиринаПривязки;

Перем НомерСтрокиИзм;
Перем Смещение;
Перем РасширениеФормы;

//======================================================================
Процедура ЗаполнитьТипАтрибута()
	
	ТипАтрибутаПоНомеру[1]  = "STATIC (Текст)";
	ТипАтрибутаПоНомеру[2]  = "1CEDIT (Поле ввода)";
	ТипАтрибутаПоНомеру[3]  = "BUTTON (Кнопка)";
	ТипАтрибутаПоНомеру[4]  = "1CGROUPBOX (Рамка группы)";
	ТипАтрибутаПоНомеру[5]  = "1CEDIT (Поле ввода без рамки)";
	ТипАтрибутаПоНомеру[11] = "LISTBOX (Список)";
	ТипАтрибутаПоНомеру[12] = "CHECKBOX (Флажок)";
	ТипАтрибутаПоНомеру[13] = "RADIO (Переключатель)";
	ТипАтрибутаПоНомеру[14] = "COMBOBOX (Поле со списком)";
	ТипАтрибутаПоНомеру[15] = "TABLE (Таблица)";
КонецПроцедуры // ЗаполнитьТипАтрибута

//======================================================================
Функция Сам(Конт) Возврат Конт; КонецФункции

//======================================================================
Процедура Конструктор()
	РасширениеФормы=Сам(Контекст).ПолучитьБазовыйКласс("РасширениеФормы");
	
	ТПривязки=СоздатьОбъект("ТаблицаЗначений");
	ТПривязки.НоваяКолонка("Атрибут",,,);
	
	ТПривязки.НоваяКолонка("Высота","Число",,);
	ТПривязки.НоваяКолонка("Ширина","Число",,);

	ТПривязки.НоваяКолонка("ТипВ","Строка",,);
	ТПривязки.НоваяКолонка("ЭлементВ",,,);
	ТПривязки.НоваяКолонка("ЭлементВ2",,,);
	ТПривязки.НоваяКолонка("ПривязкаВ","Число",,);
	ТПривязки.НоваяКолонка("ПривязкаВ2","Число",,);
	ТПривязки.НоваяКолонка("МножительВ","Число",,);
	ТПривязки.НоваяКолонка("ДелительВ","Число",,);
	
	ТПривязки.НоваяКолонка("ТипГ","Строка",,);
	ТПривязки.НоваяКолонка("ЭлементГ",,,);
	ТПривязки.НоваяКолонка("ЭлементГ2",,,);
	ТПривязки.НоваяКолонка("ПривязкаГ","Число",,);
	ТПривязки.НоваяКолонка("ПривязкаГ2","Число",,);
	ТПривязки.НоваяКолонка("МножительГ","Число",,);
	ТПривязки.НоваяКолонка("ДелительГ","Число",,);
	ЗаполнитьТипАтрибута();
	Флаг=-1;
	НомерСтрокиИзм=0;
КонецПроцедуры

Процедура Деструктор()
	РасширениеФормы=0;
КонецПроцедуры

Процедура УстановитьФорму(РасширяемаяФорма) Экспорт
	РасширениеФормы.УстановитьФорму(РасширяемаяФорма);
КонецПроцедуры

Процедура Сбросить() Экспорт
	ТПривязки.УдалитьСтроки();
	Флаг=-1;
КонецПроцедуры

Процедура ПривязкаАтрибута(ИДЭлемента,ТипВ,ИДЭлементаВ,ТипГ,ИДЭлементаГ)
	
	Если Врег(ИДЭлемента)=Врег("ДеревоГруппФормыСпискаСправочника") Тогда
		ЕстьДерево=РасширениеФормы.НайтиАтрибут(1,8);
		Если ЕстьДерево=0 Тогда
			//#error Не найдено ДеревоГруппФормыСпискаСправочника
		КонецЕсли;
		Атрибут=РасширениеФормы.ТекущийАтрибут();
	Иначе
		Атрибут=РасширениеФормы.ПолучитьАтрибут(ИДЭлемента);
	КонецЕсли;
	
	ТПривязки.НоваяСтрока();
	ТПривязки.Атрибут=Атрибут;
	
	Если ПустоеЗначение(ТипВ)=1 Тогда
	ИначеЕсли (ТипВ="T")ИЛИ(ТипВ="T2")ИЛИ(ТипВ="H")ИЛИ(ТипВ="TH")ИЛИ(ТипВ="BR") Тогда
		ТПривязки.ТипВ=ТипВ;
	Иначе
		//#error Неверный тип вертикальной привязки
	КонецЕсли;

	Если ТипВ="BR" Тогда
		Поз=Найти(ИДЭлементаВ,",");
		Если Поз=0 Тогда
			//#error Неверный тип горизонтальной привязки
		КонецЕсли;
		
		Верхний=Лев(ИДЭлементаВ,Поз-1);
		Нижний=Сред(ИДЭлементаВ,Поз+1);
		
		Если (Верхний="Форма")ИЛИ(ПустоеЗначение(Верхний)=1) Тогда
		Иначе
			ТПривязки.ЭлементВ=РасширениеФормы.ПолучитьАтрибут(Верхний);
		КонецЕсли;
		
		Если (Нижний="Форма")ИЛИ(ПустоеЗначение(Нижний)=1) Тогда
		Иначе
			ТПривязки.ЭлементВ2=РасширениеФормы.ПолучитьАтрибут(Нижний);
		КонецЕсли;
	Иначе
		Если (ИДЭлементаВ="Форма")ИЛИ(ПустоеЗначение(ИДЭлементаВ)=1) Тогда
		Иначе
			ТПривязки.ЭлементВ=РасширениеФормы.ПолучитьАтрибут(ИДЭлементаВ);
		КонецЕсли;
	КонецЕсли;
	
	Если ПустоеЗначение(ТипГ)=1 Тогда
	ИначеЕсли (ТипГ="L")ИЛИ(ТипГ="L2")ИЛИ(ТипГ="W")ИЛИ(ТипГ="LW")ИЛИ(ТипГ="BR") Тогда
		ТПривязки.ТипГ=ТипГ;
	Иначе
		//#error Неверный тип горизонтальной привязки
	КонецЕсли;

	Если ТипГ="BR" Тогда
		Поз=Найти(ИДЭлементаГ,",");
		Если Поз=0 Тогда
			//#error Неверный тип горизонтальной привязки
		КонецЕсли;
		
		Левый=Лев(ИДЭлементаГ,Поз-1);
		Правый=Сред(ИДЭлементаГ,Поз+1);
		
		Если (Левый="Форма")ИЛИ(ПустоеЗначение(Левый)=1) Тогда
		Иначе
			ТПривязки.ЭлементГ=РасширениеФормы.ПолучитьАтрибут(Левый);
		КонецЕсли;
		
		Если (Правый="Форма")ИЛИ(ПустоеЗначение(Правый)=1) Тогда
		Иначе
			ТПривязки.ЭлементГ2=РасширениеФормы.ПолучитьАтрибут(Правый);
		КонецЕсли;
	Иначе
		Если (ИДЭлементаГ="Форма")ИЛИ(ПустоеЗначение(ИДЭлементаГ)=1) Тогда
		Иначе
			ТПривязки.ЭлементГ=РасширениеФормы.ПолучитьАтрибут(ИДЭлементаГ);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура Привязка(ИДЭлемента,ТипВ,ИДЭлементаВ,ТипГ,ИДЭлементаГ) Экспорт
	Стр=ИДЭлемента;
	Пока ПустаяСтрока(Стр)=0 Цикл
		Поз=Найти(Стр,",");
		Если Поз=0 Тогда
			ПривязкаАтрибута(СокрЛП(Стр),ТипВ,ИДЭлементаВ,ТипГ,ИДЭлементаГ);
			Стр="";
		Иначе
			ПривязкаАтрибута(СокрЛП(Лев(Стр,Поз-1)),ТипВ,ИДЭлементаВ,ТипГ,ИДЭлементаГ);
			Стр=Сред(Стр,Поз+1);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ПоказателиВШ(ШиринаФ,ВысотаФ)
	Если ПустоеЗначение(ТПривязки.ЭлементВ)=0 Тогда
		ТПривязки.ЭлементВ.ПолучитьКоординаты(,ВысотаФ);
	КонецЕсли;
	
	Если ПустоеЗначение(ТПривязки.ЭлементГ)=0 Тогда
		ТПривязки.ЭлементГ.ПолучитьКоординаты(ШиринаФ);
	КонецЕсли;
КонецПроцедуры

Процедура ПоказателиВШ2(ШиринаФ,ВысотаФ)
	Если ПустоеЗначение(ТПривязки.ЭлементВ2)=0 Тогда
		ТПривязки.ЭлементВ2.ПолучитьКоординаты(,ВысотаФ);
	КонецЕсли;
	
	Если ПустоеЗначение(ТПривязки.ЭлементГ2)=0 Тогда
		ТПривязки.ЭлементГ2.ПолучитьКоординаты(ШиринаФ);
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьПривязку()
	Перем Лево, Верх, Ширина, Высота;
	
	ШиринаФормы=ШиринаПривязки;
	ВысотаФормы=ВысотаПривязки;
	
	ТПривязки.ВыбратьСтроки();
	Пока ТПривязки.ПолучитьСтроку()=1 Цикл
		
		ШиринаФ=ШиринаФормы;
		ВысотаФ=ВысотаФормы;
		
		ПоказателиВШ(ШиринаФ,ВысотаФ);
		
		Если (ТПривязки.ТипВ="BR")ИЛИ(ТПривязки.ТипГ="BR") Тогда
			ШиринаФ2=ШиринаФормы;
			ВысотаФ2=ВысотаФормы;
			ПоказателиВШ2(ШиринаФ2,ВысотаФ2);
		КонецЕсли;
		
		ТПривязки.Атрибут.ПолучитьКоординаты(Лево, Верх, Ширина, Высота);
		ТПривязки.Высота=Высота;
		ТПривязки.Ширина=Ширина;
		
		Если ТПривязки.ТипВ="T" Тогда
			ТПривязки.ПривязкаВ=ВысотаФ;
		ИначеЕсли ТПривязки.ТипВ="H" Тогда
			ТПривязки.ПривязкаВ=ВысотаФ;
		ИначеЕсли ТПривязки.ТипВ="TH" Тогда
			ТПривязки.МножительВ=Высота;
			ТПривязки.ДелительВ=ВысотаФ;
			ТПривязки.ПривязкаВ=ВысотаФ;
		ИначеЕсли ТПривязки.ТипВ="BR" Тогда
			ТПривязки.ПривязкаВ=ВысотаФ;
			ТПривязки.ПривязкаВ2=ВысотаФ2;
		ИначеЕсли ТПривязки.ТипВ="T2" Тогда
			ТПривязки.МножительВ=Верх;
			ТПривязки.ДелительВ=ВысотаФ;
			ТПривязки.ПривязкаВ=Цел(ВысотаФ*ТПривязки.МножительВ/ТПривязки.ДелительВ);
		КонецЕсли;
		
		Если ТПривязки.ТипГ="L" Тогда
			ТПривязки.ПривязкаГ=ШиринаФ;
		ИначеЕсли ТПривязки.ТипГ="W" Тогда
			ТПривязки.ПривязкаГ=ШиринаФ;
		ИначеЕсли ТПривязки.ТипГ="LW" Тогда
			ТПривязки.МножительГ=Ширина;
			ТПривязки.ДелительГ=ШиринаФ;
			ТПривязки.ПривязкаГ=ШиринаФ;
		ИначеЕсли ТПривязки.ТипГ="BR" Тогда
			ТПривязки.ПривязкаГ=ШиринаФ;
			ТПривязки.ПривязкаГ2=ШиринаФ2;
		ИначеЕсли ТПривязки.ТипГ="L2" Тогда
			ТПривязки.МножительГ=Лево;
			ТПривязки.ДелительГ=ШиринаФ;
			ТПривязки.ПривязкаГ=Цел(ШиринаФ*ТПривязки.МножительГ/ТПривязки.ДелительГ);
		КонецЕсли;
		
	КонецЦикла;
	
	Флаг=0;
КонецПроцедуры

Процедура ПриИзмененииРазмераОкна(ТипСобытия,ШФормы,ВФормы) Экспорт
	Перем Право, Лево, Верх, Ширина, Высота;
	
	Если Флаг=-1 Тогда
		ШиринаПривязки=РасширениеФормы.Ширина;
		ВысотаПривязки=РасширениеФормы.Высота;
		Флаг=1;
		Возврат;
	КонецЕсли;
	
	Если Флаг<>0 Тогда
		Возврат;
	КонецЕсли;
	
	ШиринаФормы=РасширениеФормы.Ширина;
	ВысотаФормы=РасширениеФормы.Высота;
	
	ТПривязки.ВыбратьСтроки();
	Пока ТПривязки.ПолучитьСтроку()=1 Цикл
		
		Если НомерСтрокиИзм=ТПривязки.НомерСтроки Тогда
			Продолжить;
		КонецЕсли;
		
		ШиринаФ=ШиринаФормы;
		ВысотаФ=ВысотаФормы;
		ПоказателиВШ(ШиринаФ,ВысотаФ);
		
		Если (ТПривязки.ТипВ="BR")ИЛИ(ТПривязки.ТипГ="BR") Тогда
			ШиринаФ2=ШиринаФормы;
			ВысотаФ2=ВысотаФормы;
			ПоказателиВШ2(ШиринаФ2,ВысотаФ2);
		КонецЕсли;
		
		ТПривязки.Атрибут.ПолучитьКоординаты(Лево, Верх, Ширина, Высота);
		
		Если ТПривязки.ТипВ="T" Тогда
			Верх=Верх+(ВысотаФ-ТПривязки.ПривязкаВ);
			ТПривязки.ПривязкаВ=ВысотаФ;
		ИначеЕсли ТПривязки.ТипВ="H" Тогда
			ТПривязки.Высота=ТПривязки.Высота+(ВысотаФ-ТПривязки.ПривязкаВ);
			ТПривязки.ПривязкаВ=ВысотаФ;
			Высота=ТПривязки.Высота;
			//Высота=Высота+(ВысотаФ-ТПривязки.ПривязкаВ);
			//ТПривязки.ПривязкаВ=ВысотаФ;
			//Если Высота<0 Тогда
			//	ТПривязки.ПривязкаВ=ТПривязки.ПривязкаВ+Высота;
			//КонецЕсли;
		ИначеЕсли ТПривязки.ТипВ="TH" Тогда
			Низ=Верх+ТПривязки.Высота;
			Низ=Низ+(ВысотаФ-ТПривязки.ПривязкаВ);
			Верх=Низ-Цел(ВысотаФ*ТПривязки.МножительВ/ТПривязки.ДелительВ);
			ТПривязки.Высота=Низ-Верх;
			ТПривязки.ПривязкаВ=ВысотаФ;
			Высота=ТПривязки.Высота;
			//Низ=Верх+Высота;
			//Низ=Низ+(ВысотаФ-ТПривязки.ПривязкаВ);
			//Верх=Низ-Цел(ВысотаФ*ТПривязки.МножительВ/ТПривязки.ДелительВ);
			//Высота=Низ-Верх;
			//ТПривязки.ПривязкаВ=ВысотаФ;
			//Если Высота<0 Тогда
			//	ТПривязки.ПривязкаВ=ТПривязки.ПривязкаВ+Высота;
			//КонецЕсли;
		ИначеЕсли ТПривязки.ТипВ="BR" Тогда
			_Верх=Верх+(ВысотаФ-ТПривязки.ПривязкаВ);
			ТПривязки.Высота=ТПривязки.Высота+(Верх-_Верх)+(ВысотаФ2-ТПривязки.ПривязкаВ2);
			Верх=_Верх;
			ТПривязки.ПривязкаВ=ВысотаФ;
			ТПривязки.ПривязкаВ2=ВысотаФ2;
			Высота=ТПривязки.Высота;
			//_Верх=Верх+(ВысотаФ-ТПривязки.ПривязкаВ);
			//Высота=Высота+(Верх-_Верх)+(ВысотаФ2-ТПривязки.ПривязкаВ2);
			//Верх=_Верх;
			//ТПривязки.ПривязкаВ=ВысотаФ;
			//ТПривязки.ПривязкаВ2=ВысотаФ2;
			//Если Высота<0 Тогда
			//	ТПривязки.ПривязкаВ2=ТПривязки.ПривязкаВ2+Высота;
			//КонецЕсли;
		ИначеЕсли ТПривязки.ТипВ="T2" Тогда
			ПривязкаВ=Цел(ВысотаФ*ТПривязки.МножительВ/ТПривязки.ДелительВ);
			Верх=Верх+(ПривязкаВ-ТПривязки.ПривязкаВ);
			ТПривязки.ПривязкаВ=ПривязкаВ;
		КонецЕсли;
		Если Верх<0 Тогда
			ТПривязки.ПривязкаВ=ТПривязки.ПривязкаВ-Верх;
		КонецЕсли;
		
		Если ТПривязки.ТипГ="L" Тогда
			Лево=Лево+(ШиринаФ-ТПривязки.ПривязкаГ);
			ТПривязки.ПривязкаГ=ШиринаФ;
		ИначеЕсли ТПривязки.ТипГ="W" Тогда
			ТПривязки.Ширина=ТПривязки.Ширина+(ШиринаФ-ТПривязки.ПривязкаГ);
			ТПривязки.ПривязкаГ=ШиринаФ;
			Ширина=ТПривязки.Ширина;
			//Ширина=Ширина+(ШиринаФ-ТПривязки.ПривязкаГ);
			//ТПривязки.ПривязкаГ=ШиринаФ;
			//Если Ширина<0 Тогда
			//	ТПривязки.ПривязкаГ=ТПривязки.ПривязкаГ+Ширина;
			//КонецЕсли;
		ИначеЕсли ТПривязки.ТипГ="LW" Тогда
			Право=Лево+ТПривязки.Ширина;
			Право=Право+(ШиринаФ-ТПривязки.ПривязкаГ);
			Лево=Право-Цел(ШиринаФ*ТПривязки.МножительГ/ТПривязки.ДелительГ);
			ТПривязки.Ширина=Право-Лево;
			ТПривязки.ПривязкаГ=ШиринаФ;
			Ширина=ТПривязки.Ширина;
			//Право=Лево+Ширина;
			//Право=Право+(ШиринаФ-ТПривязки.ПривязкаГ);
			//Лево=Право-Цел(ШиринаФ*ТПривязки.МножительГ/ТПривязки.ДелительГ);
			//Ширина=Право-Лево;
			//ТПривязки.ПривязкаГ=ШиринаФ;
			//Если Ширина<0 Тогда
			//	ТПривязки.ПривязкаГ=ТПривязки.ПривязкаГ+Ширина;
			//КонецЕсли;
		ИначеЕсли ТПривязки.ТипГ="BR" Тогда
			_Лево=Лево+(ШиринаФ-ТПривязки.ПривязкаГ);
			ТПривязки.Ширина=ТПривязки.Ширина+(Лево-_Лево)+(ШиринаФ2-ТПривязки.ПривязкаГ2);
			Лево=_Лево;
			ТПривязки.ПривязкаГ=ШиринаФ;
			ТПривязки.ПривязкаГ2=ШиринаФ2;
			Ширина=ТПривязки.Ширина;
			//_Лево=Лево+(ШиринаФ-ТПривязки.ПривязкаГ);
			//Ширина=Ширина+(Лево-_Лево)+(ШиринаФ2-ТПривязки.ПривязкаГ2);
			//Лево=_Лево;
			//ТПривязки.ПривязкаГ=ШиринаФ;
			//ТПривязки.ПривязкаГ2=ШиринаФ2;
			//Если Ширина<0 Тогда
			//	ТПривязки.ПривязкаГ2=ТПривязки.ПривязкаГ2+Ширина;
			//КонецЕсли;
		ИначеЕсли ТПривязки.ТипГ="L2" Тогда
			ПривязкаГ=Цел(ШиринаФ*ТПривязки.МножительГ/ТПривязки.ДелительГ);
			Лево=Лево+(ПривязкаГ-ТПривязки.ПривязкаГ);
			ТПривязки.ПривязкаГ=ПривязкаГ;
		КонецЕсли;
		Если Лево<0 Тогда
			ТПривязки.ПривязкаГ=ТПривязки.ПривязкаГ-Лево;
		КонецЕсли;
		
		ТПривязки.Атрибут.УстановитьКоординаты(Лево, Верх, Ширина, Высота);
	КонецЦикла;
КонецПроцедуры

Процедура ПослеОткрытия() Экспорт
	ЗаполнитьПривязку();
	ПриИзмененииРазмераОкна(0,0,0);
КонецПроцедуры

Процедура Выровнять(ИДЭлемента, Граница, ИДЭлементаЦель, ГраницаЦель, Отступ) Экспорт
	Перем Лево, Верх, Ширина, Высота;
	Перем ЛевоЦ, ВерхЦ, ШиринаЦ, ВысотаЦ;
	
	Атрибут=РасширениеФормы.ПолучитьАтрибут(ИДЭлемента);
	Атрибут.ПолучитьКоординаты(Лево, Верх, Ширина, Высота);
	
	АтрибутЦель=РасширениеФормы.ПолучитьАтрибут(ИДЭлементаЦель);
	АтрибутЦель.ПолучитьКоординаты(ЛевоЦ, ВерхЦ, ШиринаЦ, ВысотаЦ);
	
	Если Граница="R" Тогда
		Если ГраницаЦель="R" Тогда
			Ширина=ЛевоЦ+ШиринаЦ-Лево+Отступ;
		ИначеЕсли ГраницаЦель="L" Тогда
			Ширина=ЛевоЦ-Лево+Отступ;
		Иначе
			//#error Неверно указана граница цель
		КонецЕсли;
	ИначеЕсли Граница="L" Тогда
		Если ГраницаЦель="R" Тогда
			Л=ЛевоЦ+ШиринаЦ+Отступ;
			Ширина=Лево+Ширина-Л;
			Лево=Л;
		ИначеЕсли ГраницаЦель="L" Тогда
			Л=ЛевоЦ+Отступ;
			Ширина=Лево+Ширина-Л;
			Лево=Л;
		Иначе
			//#error Неверно указана граница цель
		КонецЕсли;
	ИначеЕсли Граница="B" Тогда
		Если ГраницаЦель="B" Тогда
			Высота=ВерхЦ+ВысотаЦ-Верх+Отступ;
		ИначеЕсли ГраницаЦель="T" Тогда
			Высота=ВерхЦ-Верх+Отступ;
		Иначе
			//#error Неверно указана граница цель
		КонецЕсли;
	ИначеЕсли Граница="T" Тогда
		Если ГраницаЦель="B" Тогда
			В=ВерхЦ+ВысотаЦ+Отступ;
			Высота=Верх+Высота-В;
			Верх=В;
		ИначеЕсли ГраницаЦель="T" Тогда
			В=ВерхЦ+Отступ;
			Высота=Верх+Высота-В;
			Верх=В;
		Иначе
			//#error Неверно указана граница цель
		КонецЕсли;
	Иначе
		//#error Неверно указана граница
	КонецЕсли;
	Атрибут.УстановитьКоординаты(Лево, Верх, Ширина, Высота);
	Сбросить();
КонецПроцедуры

Процедура Привязать() Экспорт
	ШиринаПривязки=РасширениеФормы.Ширина;
	ВысотаПривязки=РасширениеФормы.Высота;
	ЗаполнитьПривязку();
КонецПроцедуры

//******************************************************************************
Процедура ВывестиФлажок(ОформлениеСтроки, ДанныеСтроки, идКолонки="Пометка") Экспорт
	ОбъектЯчейка=ОформлениеСтроки.Ячейки.Получить(идКолонки);
	ОбъектЯчейка.ЗначениеФлажка=ДанныеСтроки.Получить(идКолонки);
	ОбъектЯчейка.ОтображатьФлажок=1;
	ОбъектЯчейка.ОтображатьТекст=0;
КонецПроцедуры

//******************************************************************************
Процедура ПриАктивизацииСтрокиТП(тпОбъект, тзОбъект) Экспорт
	Если (ТипЗначенияСтр(тпОбъект)="ТабличноеПоле") или (ТипЗначенияСтр(тпОбъект)="Меркурий.ТабличноеПоле.ТЗ") Тогда 	
	Иначе 
		Возврат; 
	КонецЕсли;	
	Если ПустоеЗначение(тпОбъект.ТекущиеДанные)=1 Тогда Возврат; КонецЕсли;
	Если тзОбъект.КоличествоСтрок()=0 Тогда Возврат; КонецЕсли;
	тзОбъект.ТекущаяСтрока(тпОбъект.ТекущиеДанные.НомерСтроки);
	тзОбъект.ПолучитьСтрокуПоНомеру(тпОбъект.ТекущиеДанные.НомерСтроки);
КонецПроцедуры

//******************************************************************************
Процедура ПриАктивизацииКолонкиТП(тпОбъект, тзОбъект) Экспорт
	Если (ТипЗначенияСтр(тпОбъект)="ТабличноеПоле") или (ТипЗначенияСтр(тпОбъект)="Меркурий.ТабличноеПоле.ТЗ") Тогда 	
	Иначе 
		Возврат; 
	КонецЕсли;	
	Если тзОбъект.КоличествоКолонок()=0 Тогда Возврат; КонецЕсли;
	тзОбъект.ТекущаяКолонка(тпОбъект.ТекущаяКолонка.Имя);
КонецПроцедуры

Процедура СоздатьКолонкиПоИсточнику(тпСсылка, тзСсылка, фНомерСтроки=0)
Перем Заголовок, Ширина, ФорматнаяСтрока, Положение;
	Если фНомерСтроки=1 Тогда
		НоваяКолонка=тпСсылка.Колонки.Добавить("НомерСтроки");
		НоваяКолонка.Заголовок="№ строки";
		НоваяКолонка.Данные="НомерСтроки";
		НоваяКолонка.Ширина=30;
	КонецЕсли;
	Для ъ=1 По тзСсылка.КоличествоКолонок() Цикл
		идКолонки=тзСсылка.ПолучитьПараметрыКолонки(ъ,,,, Заголовок, Ширина, ФорматнаяСтрока, Положение);
		Если тзСсылка.ВидимостьКолонки(идКолонки)=0 Тогда Продолжить; КонецЕсли;
		НоваяКолонка=тпСсылка.Колонки.Добавить(идКолонки);
		НоваяКолонка.Заголовок=Заголовок;
		НоваяКолонка.Данные=идКолонки;
		НоваяКолонка.ГоризонтальноеВыравнивание=Положение;
		НоваяКолонка.Ширина=?(Ширина>0, Ширина, 15)*6.2;
		НоваяКолонка.Формат=ФорматнаяСтрока;
		Если Ширина = 0 Тогда НоваяКолонка.Видимость = 0; КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция СоздатьТабличноеПоле(Конт, ЭлементДиалога, ОбъектИсточник, фВидимость=1, фНомерСтроки=0, КонтекстКласса=0) Экспорт
	ОбъектФорма=СоздатьОбъект("Форма");
	ОбъектФорма.УстановитьФорму(Конт.Форма);
	Если ПустоеЗначение(КонтекстКласса)=1 Тогда
		ОбъектТабличноеПоле=ОбъектФорма.СоздатьЭлементУправления("ТабличноеПоле", ЭлементДиалога);

		ОбъектТабличноеПоле.РежимВыделенияСтроки =2;
		ОбъектТабличноеПоле.ЦветФонаВыделения=223322;
		ОбъектТабличноеПоле.SetTextMargins(, 0, , 2);
		//ОбъектТабличноеПоле.ЧередованиеЦветовСтрок = 1;
	Иначе
		ОбъектТабличноеПоле=ОбъектФорма.СоздатьЭлементУправления(КонтекстКласса, ЭлементДиалога);
	КонецЕсли;

	Конт.Форма.ПолучитьАтрибут(ЭлементДиалога).Видимость(фВидимость);

	Если ТипЗначенияСтр(ОбъектИсточник)="ТаблицаЗначений" Тогда
		Источник=СоздатьОбъект("VTProvider");
		Источник.УстТаблицуЗначений(ОбъектИсточник);
		СоздатьКолонкиПоИсточнику(ОбъектТабличноеПоле, ОбъектИсточник,фНомерСтроки);
		ОбъектТабличноеПоле.ПоставщикДанных=Источник;
	КонецЕсли;
	Возврат ОбъектТабличноеПоле;
КонецФункции