//http://integration.atol.ru/api/?pascal#1afc0993f9

Перем fptr;
Перем _cons;
Перем НомерЧека;

//https://htmlweb.ru/html/symbols.php
Функция ЗаменитьСпецСимволы(Стр) Экспорт
    Рез = СокрЛП(Стр);
	Рез = СтрЗаменить(Рез,"&" ,"&amp;" );
	Рез = СтрЗаменить(Рез,"""","");
	Рез = СтрЗаменить(Рез,"<" ,"&lt;"  );
	Рез = СтрЗаменить(Рез,">" ,"&gt;"  );
	Рез = СтрЗаменить(Рез,"'" ,"");
	Рез = СтрЗаменить(Рез,"№" ,"#");
	//Рез = СтрЗаменить(Рез,"/" ,"//");
	Возврат Рез;
КонецФункции

Функция ПолучитьИНН(ВыбКлиент) экспорт

	//стандартное поведение функции
	Попытка
		ИННКПП = ВыбКлиент.ЮрФизЛицо.ИНН;
	Исключение
		ИННКПП = "";
	КонецПопытки;

	Если Найти(ИННКПП, "\") <> 0 Тогда
		// найден разделитель
		Возврат Лев(ИННКПП, Найти(ИННКПП, "\") - 1);

	ИначеЕсли Найти(ИННКПП, "/") <> 0 Тогда
		// найден разделитель
		Возврат Лев(ИННКПП, Найти(ИННКПП, "/") - 1);
	Иначе
		Возврат СокрЛП(ИННКПП);
	КонецЕсли;
КонецФункции // ПолучитьИНН() 

Процедура Ошибка(Ответ, Сообщ="", знак="!")
	Если Ответ<>0 Тогда
		Сообщить("Ответ = "+Ответ+" "+Сообщ + "#"+ fptr.errorCode() + "= ["+ fptr.errorDescription() +"]", знак);
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьКассира( ВыбКасса )
	
	Попытка
		Кассир = ВыбКасса.ПКОКассир.Получить(ТекущаяДата());
	Исключение
		Кассир = глПользователь;
	КонецПопытки;
	
	Попытка
		Инн = Кассир.ИНН;
	Исключение
		Инн ="";
	КонецПопытки;
	
	
	Если ПустоеЗначение(ИНН)=1 Тогда
		Предупреждение("Не указан ИНН пользователя / кассира");		
		//СтатусВозврата(0);
		//Возврат;		
	КонецЕсли;	
	
  	fptr.setParamString(1021, СокрЛП( Кассир.Наименование ) );
    fptr.setParamString(1203, СокрЛП( ИНН ));
    fptr.operatorLogin();
	
КонецПроцедуры

// // ---------------------------------- Открыть смену ------------------------------------//
Процедура ОткрытьСмену()
	
	ДобавитьКассира( ВыбКасса );

    Ответ = fptr.openShift();
	Ошибка(Ответ);	
	
    Ответ = fptr.checkDocumentClosed();		
	Ошибка(Ответ);	
	
КонецПроцедуры

// // ---------------------------------- Закрыть смену -------------------------------------//
Процедура ЗакрытьСмену( ВыбКасса )
	
	ДобавитьКассира( ВыбКасса );
	
    fptr.setParamInt( _cons.LIBFPTR_PARAM_REPORT_TYPE, _cons.LIBFPTR_RT_CLOSE_SHIFT);
    Ответ = fptr.report();
	Ошибка(Ответ);	

    Ответ = fptr.checkDocumentClosed();	
	Ошибка(Ответ);		
	
КонецПроцедуры

Процедура ОткрытьЧек( док )
	
	ДобавитьКассира( ВыбКасса );
		
	//Открытие печатного чека
	//Возможные значения для типа открытого чека (LIBFPTR_PARAM_RECEIPT_TYPE):
	//LIBFPTR_RT_CLOSED - чек закрыт
	//LIBFPTR_RT_SELL - чек прихода
	//LIBFPTR_RT_SELL_RETURN - чек возврата прихода
	//LIBFPTR_RT_SELL_CORRECTION - чек коррекции прихода
	//LIBFPTR_RT_BUY - чек расхода
	//LIBFPTR_RT_BUY_RETURN - чек возврата расхода
	//LIBFPTR_RT_BUY_CORRECTION - чек коррекции расхода	
    fptr.setParamInt( _cons.LIBFPTR_PARAM_RECEIPT_TYPE, _cons.LIBFPTR_RT_SELL);
	
	////Открытие электронного чека
	//Чтобы чек не печатался (электронный чек), нужно установить параметру LIBFPTR_PARAM_RECEIPT_ELECTRONICALLY значение true и передать реквизит 1008 (электронный адрес или телефон получателя).	
    //fptr.setParam( _cons.LIBFPTR_PARAM_RECEIPT_TYPE, _cons.LIBFPTR_RT_SELL);
    //fptr.setParam( _cons.LIBFPTR_PARAM_RECEIPT_ELECTRONICALLY, 1);
	//1008	Электронный адрес / телефон получателя	string
    fptr.setParamString(1008, СокрЛП(Док.Контрагент.ЭлПочта) );

	//1227	Наименование получателя	string
	fptr.setParamString(1227, ЗаменитьСпецСимволы(Док.Контрагент.ЮрФизЛицо.ПолнНаименование) );
	//1228	ИНН получателя	string
	fptr.setParamString(1228, ПолучитьИНН(Док.Контрагент) );
	//1117	Электронный адрес отправителя чека	string
	fptr.setParamString(1117, Док.Фирма.ЭлПочта );
	//1055	Применяемая система налогообложения (СНО)	int
	fptr.setParamInt(1055, _cons.LIBFPTR_TT_OSN );
	//1187	Место расчета	string
	//1060	Адрес сайта ФНС	string
	//1057	Признак агента	int
	fptr.setParamInt(1055, _cons.LIBFPTR_AT_NONE );
	//1171	Телефон поставщика	string
	//fptr.setParamString(1171, СокрЛП(Док.Фирма.ЮрЛицо.Телефоны) );
	//1044	Операция платежного агента	string
	//1073	Телефон платежного агента (может повторяться несколько раз)	string
	//1005	Адрес оператора перевода	string
	//1016	ИНН оператора перевода	string
	//1026	Наименование оператора перевода	string
	//1075	Телефон оператора перевода (может повторяться несколько раз)	string
	//1074	Телефон оператора по приему платежей (может повторяться несколько раз)	string
	//1084	Дополнительный реквизит пользователя	bytearray
	//1192	Дополнительный реквизит чека (БСО)	string
		
    Ответ = fptr.openReceipt();	
	Ошибка( Ответ );

	//fptr.setParamString( _cons.LIBFPTR_PARAM_TEXT, "ИНН покупателя: "+ПолучитьИНН(Док.Контрагент) );
    //fptr.printText();

	
КонецПроцедуры

//{ Отчеты

// // ------------------------- Отчёт о состоянии расчётов ------------------------------//
Процедура ОтчётОСостоянииРасчётов()
	
    fptr.setParamInt( _cons.LIBFPTR_PARAM_REPORT_TYPE, _cons.LIBFPTR_RT_OFD_EXCHANGE_STATUS);
    Ответ = fptr.report();	
	Ошибка(Ответ);	

КонецПроцедуры

Процедура ОтчетХ()
	
	fptr.setParamInt( _cons.LIBFPTR_PARAM_REPORT_TYPE, _cons.LIBFPTR_RT_X);
    Ответ = fptr.report();	
	Ошибка(Ответ);	
	
КонецПроцедуры

Процедура ОтчетСостояниеСвязи()
	
	fptr.setParamInt( _cons.LIBFPTR_PARAM_REPORT_TYPE, _cons.LIBFPTR_RT_OFD_TEST);
    Ответ = fptr.report();
	Ошибка(Ответ);	
	
    fptr.setParamInt( _cons.LIBFPTR_PARAM_FN_DATA_TYPE, _cons.LIBFPTR_FNDT_OFD_EXCHANGE_STATUS);
    Ответ = fptr.fnQueryData();
	Ошибка(Ответ);	
	
	Сообщить("    exchangeStatus      := " + fptr.getParamInt( _cons.LIBFPTR_PARAM_OFD_EXCHANGE_STATUS) );
	Сообщить("    unsentCount         := " + fptr.getParamInt( _cons.LIBFPTR_PARAM_DOCUMENTS_COUNT) );
	Сообщить("    firstUnsentNumber   := " + fptr.getParamInt( _cons.LIBFPTR_PARAM_DOCUMENT_NUMBER) );
	Сообщить("    ofdMessageRead      := " + fptr.getParamBool( _cons.LIBFPTR_PARAM_OFD_MESSAGE_READ) );
	Сообщить("    dateTime            := " + fptr.getParamDateTime( _cons.LIBFPTR_PARAM_DATE_TIME) );

КонецПроцедуры


// // ---------------------------------- Поддерживаемая версия ФФД ------------------------------------//
Процедура ВерсияФФД()
	
//	fptr.setParam( _cons.LIBFPTR_PARAM_DATA_TYPE, _cons.LIBFPTR_DT_SHORT_STATUS);
//    Ответ = fptr.queryData();
//
//	Сообщить("    isCashDrawerOpened      := " + fptr.getParamBool(_cons.LIBFPTR_PARAM_CASHDRAWER_OPENED) );
//	Сообщить("    isPaperPresent          := " + fptr.getParamBool(_cons.LIBFPTR_PARAM_RECEIPT_PAPER_PRESENT) );
//	Сообщить("    isPaperNearEnd          := " + fptr.getParamBool(_cons.LIBFPTR_PARAM_PAPER_NEAR_END) );
//	Сообщить("    isCoverOpened           := " + fptr.getParamBool(_cons.LIBFPTR_PARAM_COVER_OPENED) );
	
	fptr.setParamInt( _cons.LIBFPTR_PARAM_FN_DATA_TYPE, _cons.LIBFPTR_FNDT_FFD_VERSIONS);
    Ответ = fptr.fnQueryData();
	Ошибка(Ответ);	
	
	Сообщить("    deviceFfdVersion    := " + fptr.getParamInt( _cons.LIBFPTR_PARAM_DEVICE_FFD_VERSION) );
	Сообщить("    fnFfdVersion        := " + fptr.getParamInt( _cons.LIBFPTR_PARAM_FN_FFD_VERSION) );
	Сообщить("    ffdVersion          := " + fptr.getParamInt( _cons.LIBFPTR_PARAM_FFD_VERSION) );
	Сообщить("    maxFfdVersion       := " + fptr.getParamInt( _cons.LIBFPTR_PARAM_DEVICE_MAX_FFD_VERSION) );
	Сообщить("    minFfdVersion       := " + fptr.getParamInt( _cons.LIBFPTR_PARAM_DEVICE_MIN_FFD_VERSION) );

КонецПроцедуры

//} отчеты


Процедура НастройкаСвойств()
	
	fptr.showProperties(_cons.LIBFPTR_GUI_PARENT_NATIVE );

КонецПроцедуры

Процедура Старт()
	
    Форма.кнСтарт.Доступность(0);
	Форма.кнНастройкаСвойств.Доступность(0);

    Форма.кнСтарт.Доступность(1);
	Форма.кнНастройкаСвойств.Доступность(1);
	
КонецПроцедуры

Процедура Предоплата( Док, Сторно=0 )

//	ОткрытьЧек( Док );
//
//	    fptr.setParamString( _cons.LIBFPTR_PARAM_COMMODITY_NAME,  "предоплата за мясопродукцию из мяса птицы в ассортименте по договору" );
//	    fptr.setParamDouble( _cons.LIBFPTR_PARAM_PRICE, Док.Сумма);
//	    fptr.setParamDouble( _cons.LIBFPTR_PARAM_QUANTITY, 1);	    
//
//		//1212	Признак предмета расчета	int
//		// Признак предмета расчёта. Свойство ItemType может принимать значения:
//		// 	1 - товар, за исключением подакцизного товара
//		// 	2 - подакцизный товар
//		// 	3 - работа
//		// 	4 - услуга
//		// 	5 - приём ставок при деятельность по организации и проведению азартных игр
//		// 	6 - выплата выигрышей в азартных играх
//		// 	7 - реализация лотерейных билетов или ставок при деятельность по организации и проведению лотерей
//		// 	8 - выплата выигрышей в лотереях
//		// 	9 -  прав на использование результатов интеллектуальной деятельности или средств индивидуализации
//		// 	10 -  аванс, задаток, предоплата, кредит, взносе в счет оплаты, пени, штраф, вознаграждение, бонус и иной аналогичный предмет расчета
//		// 	11 -  предмет расчета, состоящий из предметов, каждому из которых может быть присвоено значение от 0 до 10 (набор)
//		// 	12 -  предмет расчета, не относящийся к предметам расчета, которым может быть присвоено значение от 0 до 11
//		Попытка
//			fptr.setParamInt( 1212, Док.ФФД_ПредметаРасчёта  );
//		Исключение
//			fptr.setParamInt( 1212, 10  );
//		КонецПопытки;		
//		
//		//1214	Признак способа расчета	int
//		// Признак способа расчёта. Свойство PaymentMode может принимать значения:
//		// 	1 - Полная предварительная оплата до момента передачи предмета расчета
//		// 	2 - Частичная предварительная оплата до момента передачи предмета расчета
//		// 	3 - Аванс
//		// 	4 - Полная оплата, в том числе с учетом аванса (предварительной оплаты) в момент передачи предмета расчета
//		// 	5 - Частичная оплата предмета расчета в момент его передачи с последующей оплатой в кредит
//		// 	6 - Передача предмета расчета без его оплаты в момент его передачи с последующей оплатой в кредит
//		// 	7 - Оплата предмета расчета после его передачи с оплатой в кредит (оплата кредита)
//		Попытка
//			fptr.setParamInt( 1214, Док.ФФД_СпособРасчёта  );
//		Исключение
//			fptr.setParamInt( 1214, 2 );
//		КонецПопытки;			
//
//		////1222	Признак агента по предмету расчета	int
//		//fptr.setParamInt( 1222, _cons.LIBFPTR_AT_NONE );
//		
//		////Регистрация позиции без расчета суммы налога
//		//fptr.setParam( _cons.LIBFPTR_PARAM_TAX_TYPE, _cons.LIBFPTR_TAX_VAT0);		
//		//fptr.setParam( _cons.LIBFPTR_PARAM_USE_ONLY_TAX_TYPE, 1);
//		//fptr.registration();		
//	    
//
//		Если Док.СтавкаНДС = Перечисление.СтавкиНДС.НДС10 Тогда
//			fptr.setParamInt( _cons.LIBFPTR_PARAM_DEPARTMENT, 2 );
//			fptr.setParamInt( _cons.LIBFPTR_PARAM_TAX_TYPE, _cons.LIBFPTR_TAX_VAT10 );
//		Иначе //18/20 %
//			//Константы LIBFPTR_TAX_VAT20 и LIBFPTR_TAX_VAT120 передаются в ККТ теми же значениями, как и LIBFPTR_TAX_VAT18 и LIBFPTR_TAX_VAT118. ПО может работать с любыми из этих констант.
//			fptr.setParamInt( _cons.LIBFPTR_PARAM_DEPARTMENT, 3 );
//			fptr.setParamInt( _cons.LIBFPTR_PARAM_TAX_TYPE, _cons.LIBFPTR_TAX_VAT20  );
//		КонецЕсли;
//		
//		fptr.setParamInt( _cons.LIBFPTR_PARAM_TAX_SUM, 0); //При передаче значения 0 рассчитывается автоматически
//		fptr.registration();
//	    //fptr.receiptTax();		
//			
//	////Допускается регистрация итога меньше суммы чека, но только в рамках копеек. Т.е., если общая сумма чека равна 1000.57, то можно зарегистрировать итог от 1000.00 до 1000.57.
//	////Метод не является обязательным. Если его не использовать, сумма чека будет посчитана автоматически, без округлений копеек.
//	//fptr.setParam( _cons.LIBFPTR_PARAM_SUM, док.СуммаВзаиморасчетов);
//    //fptr.receiptTotal();
//	
//	//Способ расчета (LIBFPTR_PARAM_PAYMENT_TYPE) может принимать следующие значения:
//	//LIBFPTR_PT_CASH - наличными
//	//LIBFPTR_PT_ELECTRONICALLY - безналичными
//	//LIBFPTR_PT_PREPAID - предварительная оплата (аванс)
//	//LIBFPTR_PT_CREDIT - последующая оплата (кредит)
//	//LIBFPTR_PT_OTHER - иная форма оплаты (встречное предоставление)
//	//LIBFPTR_PT_6 - способ расчета №6
//	//LIBFPTR_PT_7 - способ расчета №7
//	//LIBFPTR_PT_8 - способ расчета №8
//	//LIBFPTR_PT_9 - способ расчета №9
//	//LIBFPTR_PT_10 - способ расчета №10	
//	//fptr.setParam( _cons.LIBFPTR_PARAM_PAYMENT_TYPE, _cons.LIBFPTR_PT_PREPAID);	
//	fptr.setParamDouble(_cons.LIBFPTR_PARAM_SUM, док.СуммаВзаиморасчетов);
//    fptr.cashIncome();	
//    fptr.closeReceipt();	
//			
//		// Сумма налога TaxSumm. Если передаётся 0, то ККТ считает самостоятельно по TaxTypeNumber и TaxMode. В противном случае в ОФД отправляется переданная сумма, но при значении настройки Т2Р1П114 бит 1 = 1 ККТ  бедет осуществлять контроль переданных данных, при чём контроль в будущем нельзя будет отключить (Русинова).
//		//fptr.TaxSumm = Окр( (50.33 * 10 / 110 * 100) / 100, 2, 1); 
//		//fptr.TaxSumm = тз.СуммаНДС;
//		//fptr.TaxSumm = Док.Сумма*Число(Строка(Док.СтавкаНДС))/(100+Число(Строка(Док.СтавкаНДС)));
//		

КонецПроцедуры

Функция НомерНаПечать(Док)
	
	Номер=СокрЛП(Док.НомерДок);
	Номер=Сред(Номер, 2);
	// в документах, перенессеных из старых редакций, может остаться "минус" впереди
	Если Лев(Номер, 1) = "-" Тогда
		Номер	= Сред(Номер, 2);
	КонецЕсли;

	// удаление ведущих нулей
	Пока Лев(Номер, 1)="0" Цикл
		Номер=Сред(Номер, 2);
	КонецЦикла;

	Номер = СокрЛП(Номер + Док.Филиал.НомерДляСФ);

	Возврат Номер;
КонецФункции

Процедура ОПЛАТА(Док, Сторно=0)

	ОткрытьЧек( док );
	
	Если Док.ДокОснование.Вид() = "РеализацияПрочее" Тогда

 		fptr.setParamString( _cons.LIBFPTR_PARAM_COMMODITY_NAME,  ЗаменитьСпецСимволы(Док.Приложение) );
	    fptr.setParamDouble( _cons.LIBFPTR_PARAM_PRICE, Док.СуммаВзаиморасчетов);
	    fptr.setParamDouble( _cons.LIBFPTR_PARAM_QUANTITY, 1);	    

		//1212	Признак предмета расчета	int
		// Признак предмета расчёта. Свойство ItemType может принимать значения:
		// 	1 - товар, за исключением подакцизного товара
		// 	2 - подакцизный товар
		// 	3 - работа
		// 	4 - услуга
		// 	5 - приём ставок при деятельность по организации и проведению азартных игр
		// 	6 - выплата выигрышей в азартных играх
		// 	7 - реализация лотерейных билетов или ставок при деятельность по организации и проведению лотерей
		// 	8 - выплата выигрышей в лотереях
		// 	9 -  прав на использование результатов интеллектуальной деятельности или средств индивидуализации
		// 	10 -  аванс, задаток, предоплата, кредит, взносе в счет оплаты, пени, штраф, вознаграждение, бонус и иной аналогичный предмет расчета
		// 	11 -  предмет расчета, состоящий из предметов, каждому из которых может быть присвоено значение от 0 до 10 (набор)
		// 	12 -  предмет расчета, не относящийся к предметам расчета, которым может быть присвоено значение от 0 до 11
		Попытка
			fptr.setParamInt( 1212, Док.ФФД_ПредметаРасчёта  );
		Исключение
			fptr.setParamInt( 1212, 10  );
		КонецПопытки;		
		
		//1214	Признак способа расчета	int
		// Признак способа расчёта. Свойство PaymentMode может принимать значения:
		// 	1 - Полная предварительная оплата до момента передачи предмета расчета
		// 	2 - Частичная предварительная оплата до момента передачи предмета расчета
		// 	3 - Аванс
		// 	4 - Полная оплата, в том числе с учетом аванса (предварительной оплаты) в момент передачи предмета расчета
		// 	5 - Частичная оплата предмета расчета в момент его передачи с последующей оплатой в кредит
		// 	6 - Передача предмета расчета без его оплаты в момент его передачи с последующей оплатой в кредит
		// 	7 - Оплата предмета расчета после его передачи с оплатой в кредит (оплата кредита)
		Попытка
			fptr.setParamInt( 1214, Док.ФФД_СпособРасчёта  );
		Исключение
			fptr.setParamInt( 1214, 7 );
		КонецПопытки;			

		////1222	Признак агента по предмету расчета	int
		//fptr.setParamInt( 1222, _cons.LIBFPTR_AT_NONE );
		
		////Регистрация позиции без расчета суммы налога
		fptr.setParamInt( _cons.LIBFPTR_PARAM_TAX_TYPE, _cons.LIBFPTR_TAX_VAT0);	// !!! НДС не облагается	
		//fptr.setParam( _cons.LIBFPTR_PARAM_USE_ONLY_TAX_TYPE, 1);
		Ответ = fptr.registration();		
		Ошибка( Ответ );
	    

		//Если Док.СтавкаНДС = Перечисление.СтавкиНДС.НДС10 Тогда
		//	fptr.setParam( _cons.LIBFPTR_PARAM_DEPARTMENT, 2 );
		//	fptr.setParam( _cons.LIBFPTR_PARAM_TAX_TYPE, _cons.LIBFPTR_TAX_VAT10 );
		//Иначе //18/20 %
		//	//Константы LIBFPTR_TAX_VAT20 и LIBFPTR_TAX_VAT120 передаются в ККТ теми же значениями, как и LIBFPTR_TAX_VAT18 и LIBFPTR_TAX_VAT118. ПО может работать с любыми из этих констант.
		//	fptr.setParam( _cons.LIBFPTR_PARAM_DEPARTMENT, 3 );
		//	fptr.setParam( _cons.LIBFPTR_PARAM_TAX_TYPE, _cons.LIBFPTR_TAX_VAT20  );
		//КонецЕсли;
		//
		//fptr.setParam( _cons.LIBFPTR_PARAM_TAX_SUM, 0); //При передаче значения 0 рассчитывается автоматически
		//fptr.registration();
	    //fptr.receiptTax();	
		
	ИначеЕсли Док.Аванс=1 Тогда
		//Предоплата 
		
	    fptr.setParamString( _cons.LIBFPTR_PARAM_COMMODITY_NAME,  "предоплата за мясопродукцию из мяса птицы в ассортименте по договору" );
	    fptr.setParamDouble( _cons.LIBFPTR_PARAM_PRICE, Док.Сумма);
	    fptr.setParamDouble( _cons.LIBFPTR_PARAM_QUANTITY, 1);	    

		//1212	Признак предмета расчета	int
		// Признак предмета расчёта. Свойство ItemType может принимать значения:
		// 	1 - товар, за исключением подакцизного товара
		// 	2 - подакцизный товар
		// 	3 - работа
		// 	4 - услуга
		// 	5 - приём ставок при деятельность по организации и проведению азартных игр
		// 	6 - выплата выигрышей в азартных играх
		// 	7 - реализация лотерейных билетов или ставок при деятельность по организации и проведению лотерей
		// 	8 - выплата выигрышей в лотереях
		// 	9 -  прав на использование результатов интеллектуальной деятельности или средств индивидуализации
		// 	10 -  аванс, задаток, предоплата, кредит, взносе в счет оплаты, пени, штраф, вознаграждение, бонус и иной аналогичный предмет расчета
		// 	11 -  предмет расчета, состоящий из предметов, каждому из которых может быть присвоено значение от 0 до 10 (набор)
		// 	12 -  предмет расчета, не относящийся к предметам расчета, которым может быть присвоено значение от 0 до 11
		Попытка
			fptr.setParamInt( 1212, Док.ФФД_ПредметаРасчёта  );
		Исключение
			fptr.setParamInt( 1212, 10  );
		КонецПопытки;		
		
		//1214	Признак способа расчета	int
		// Признак способа расчёта. Свойство PaymentMode может принимать значения:
		// 	1 - Полная предварительная оплата до момента передачи предмета расчета
		// 	2 - Частичная предварительная оплата до момента передачи предмета расчета
		// 	3 - Аванс
		// 	4 - Полная оплата, в том числе с учетом аванса (предварительной оплаты) в момент передачи предмета расчета
		// 	5 - Частичная оплата предмета расчета в момент его передачи с последующей оплатой в кредит
		// 	6 - Передача предмета расчета без его оплаты в момент его передачи с последующей оплатой в кредит
		// 	7 - Оплата предмета расчета после его передачи с оплатой в кредит (оплата кредита)
		Попытка
			fptr.setParamInt( 1214, Док.ФФД_СпособРасчёта  );
		Исключение
			fptr.setParamInt( 1214, 2 );
		КонецПопытки;			

		////1222	Признак агента по предмету расчета	int
		//fptr.setParamInt( 1222, _cons.LIBFPTR_AT_NONE );
		
		////Регистрация позиции без расчета суммы налога
		//fptr.setParam( _cons.LIBFPTR_PARAM_TAX_TYPE, _cons.LIBFPTR_TAX_VAT0);		
		//fptr.setParam( _cons.LIBFPTR_PARAM_USE_ONLY_TAX_TYPE, 1);
		//fptr.registration();		
	    

		Если Док.СтавкаНДС = Перечисление.СтавкиНДС.НДС10 Тогда
			fptr.setParamInt( _cons.LIBFPTR_PARAM_DEPARTMENT, 2 );
			fptr.setParamInt( _cons.LIBFPTR_PARAM_TAX_TYPE, _cons.LIBFPTR_TAX_VAT10 );
		Иначе //18/20 %
			//Константы LIBFPTR_TAX_VAT20 и LIBFPTR_TAX_VAT120 передаются в ККТ теми же значениями, как и LIBFPTR_TAX_VAT18 и LIBFPTR_TAX_VAT118. ПО может работать с любыми из этих констант.
			fptr.setParamInt( _cons.LIBFPTR_PARAM_DEPARTMENT, 3 );
			fptr.setParamInt( _cons.LIBFPTR_PARAM_TAX_TYPE, _cons.LIBFPTR_TAX_VAT20  );
		КонецЕсли;
		
		fptr.setParamInt( _cons.LIBFPTR_PARAM_TAX_SUM, 0); //При передаче значения 0 рассчитывается автоматически
		fptr.registration();
	    //fptr.receiptTax();		
			
		////Допускается регистрация итога меньше суммы чека, но только в рамках копеек. Т.е., если общая сумма чека равна 1000.57, то можно зарегистрировать итог от 1000.00 до 1000.57.
		////Метод не является обязательным. Если его не использовать, сумма чека будет посчитана автоматически, без округлений копеек.
		//fptr.setParam( _cons.LIBFPTR_PARAM_SUM, док.СуммаВзаиморасчетов);
	    //fptr.receiptTotal();
		
		//Способ расчета (LIBFPTR_PARAM_PAYMENT_TYPE) может принимать следующие значения:
		//LIBFPTR_PT_CASH - наличными
		//LIBFPTR_PT_ELECTRONICALLY - безналичными
		//LIBFPTR_PT_PREPAID - предварительная оплата (аванс)
		//LIBFPTR_PT_CREDIT - последующая оплата (кредит)
		//LIBFPTR_PT_OTHER - иная форма оплаты (встречное предоставление)
		//LIBFPTR_PT_6 - способ расчета №6
		//LIBFPTR_PT_7 - способ расчета №7
		//LIBFPTR_PT_8 - способ расчета №8
		//LIBFPTR_PT_9 - способ расчета №9
		//LIBFPTR_PT_10 - способ расчета №10	
		//fptr.setParam( _cons.LIBFPTR_PARAM_PAYMENT_TYPE, _cons.LIBFPTR_PT_PREPAID);	
		//fptr.setParamDouble(_cons.LIBFPTR_PARAM_SUM, док.СуммаВзаиморасчетов);
	    //fptr.cashIncome();	
	    //fptr.closeReceipt();	
			
		// Сумма налога TaxSumm. Если передаётся 0, то ККТ считает самостоятельно по TaxTypeNumber и TaxMode. В противном случае в ОФД отправляется переданная сумма, но при значении настройки Т2Р1П114 бит 1 = 1 ККТ  бедет осуществлять контроль переданных данных, при чём контроль в будущем нельзя будет отключить (Русинова).
		//fptr.TaxSumm = Окр( (50.33 * 10 / 110 * 100) / 100, 2, 1); 
		//fptr.TaxSumm = тз.СуммаНДС;
		//fptr.TaxSumm = Док.Сумма*Число(Строка(Док.СтавкаНДС))/(100+Число(Строка(Док.СтавкаНДС)));
		
		
		
	ИначеЕсли Док.Сумма > Док.ДокОснование.СуммаВзаиморасчетов Тогда
		Сообщить("сумма ПКО отличается от суммы документа основания:
		|Сумма ПКО = "+Док.Сумма+"
		|Сумма основания = "+Док.ДокОснование.СуммаВзаиморасчетов,"!");
		Возврат;

	ИначеЕсли Док.Сумма = Док.ДокОснование.СуммаВзаиморасчетов Тогда

	  	тз = СоздатьОбъект("ТаблицаЗначений");
	  	Док.ВыгрузитьТабличнуюЧасть(тз);
		тз.ВыбратьСтроки();
		Пока тз.ПолучитьСтроку() = 1 Цикл
		
		    fptr.setParamString( _cons.LIBFPTR_PARAM_COMMODITY_NAME,  ЗаменитьСпецСимволы(тз.Номенклатура.Наименование));
		    fptr.setParamDouble( _cons.LIBFPTR_PARAM_PRICE, тз.Цена);
		    fptr.setParamDouble( _cons.LIBFPTR_PARAM_QUANTITY, тз.Количество);	    
	
			//1212	Признак предмета расчета	int
			// Признак предмета расчёта. Свойство ItemType может принимать значения:
			// 	1 - товар, за исключением подакцизного товара
			// 	2 - подакцизный товар
			// 	3 - работа
			// 	4 - услуга
			// 	5 - приём ставок при деятельность по организации и проведению азартных игр
			// 	6 - выплата выигрышей в азартных играх
			// 	7 - реализация лотерейных билетов или ставок при деятельность по организации и проведению лотерей
			// 	8 - выплата выигрышей в лотереях
			// 	9 -  прав на использование результатов интеллектуальной деятельности или средств индивидуализации
			// 	10 -  аванс, задаток, предоплата, кредит, взносе в счет оплаты, пени, штраф, вознаграждение, бонус и иной аналогичный предмет расчета
			// 	11 -  предмет расчета, состоящий из предметов, каждому из которых может быть присвоено значение от 0 до 10 (набор)
			// 	12 -  предмет расчета, не относящийся к предметам расчета, которым может быть присвоено значение от 0 до 11
			fptr.setParamInt( 1212, 10 );
			
			//1214	Признак способа расчета	int
			// Признак способа расчёта. Свойство PaymentMode может принимать значения:
			// 	1 - Полная предварительная оплата до момента передачи предмета расчета
			// 	2 - Частичная предварительная оплата до момента передачи предмета расчета
			// 	3 - Аванс
			// 	4 - Полная оплата, в том числе с учетом аванса (предварительной оплаты) в момент передачи предмета расчета
			// 	5 - Частичная оплата предмета расчета в момент его передачи с последующей оплатой в кредит
			// 	6 - Передача предмета расчета без его оплаты в момент его передачи с последующей оплатой в кредит
			// 	7 - Оплата предмета расчета после его передачи с оплатой в кредит (оплата кредита)
			Попытка
				fptr.setParamInt( 1214, Док.ФФД_СпособРасчёта  );
			Исключение
				fptr.setParamInt( 1214, 7 );
			КонецПопытки;		
	
			////1222	Признак агента по предмету расчета	int
			//fptr.setParamInt( 1222, _cons.LIBFPTR_AT_NONE );
			
			//Регистрация позиции без расчета суммы налога
			fptr.setParamInt( _cons.LIBFPTR_PARAM_TAX_TYPE, _cons.LIBFPTR_TAX_VAT0);	// !!! НДС не облагается
			//fptr.setParamInt( _cons.LIBFPTR_PARAM_USE_ONLY_TAX_TYPE, 1);
			
		    Ответ = fptr.registration();		
			Ошибка( Ответ );
	
		//	Если тз.СтавкаНДС = Перечисление.СтавкиНДС.НДС10 Тогда
		//		fptr.setParam( _cons.LIBFPTR_PARAM_DEPARTMENT, 2 );
		//		fptr.setParam( _cons.LIBFPTR_PARAM_TAX_TYPE, _cons.LIBFPTR_TAX_VAT10 );
		//	Иначе //18/20 %
		//		//Константы LIBFPTR_TAX_VAT20 и LIBFPTR_TAX_VAT120 передаются в ККТ теми же значениями, как и LIBFPTR_TAX_VAT18 и LIBFPTR_TAX_VAT118. ПО может работать с любыми из этих констант.
		//		fptr.setParam( _cons.LIBFPTR_PARAM_DEPARTMENT, 3 );
		//		fptr.setParam( _cons.LIBFPTR_PARAM_TAX_TYPE, _cons.LIBFPTR_TAX_VAT20  );
		//	КонецЕсли;
		//
		//	fptr.setParam( _cons.LIBFPTR_PARAM_TAX_SUM, тз.СуммаНДС);
		//    fptr.receiptTax();		
			
		КонецЦикла;

	Иначе
		//Док.Сумма < Док.ДокОснование.СуммаВзаиморасчетов Тогда
		// частичная оплата накладной
		
    	fptr.setParamString( _cons.LIBFPTR_PARAM_COMMODITY_NAME,  ЗаменитьСпецСимволы( "ЧАСТИЧНЫЙ РАСЧЕТ И КРЕДИТ товар из мяса птицы №"+ НомерНаПечать(Док.ДокОснование)+" "+ Док.ДокОснование.ДатаДок ) );
	    fptr.setParamDouble( _cons.LIBFPTR_PARAM_PRICE, Док.Сумма);
	    fptr.setParamDouble( _cons.LIBFPTR_PARAM_QUANTITY, 1);	    

		//1212	Признак предмета расчета	int
		// Признак предмета расчёта. Свойство ItemType может принимать значения:
		// 	1 - товар, за исключением подакцизного товара
		// 	2 - подакцизный товар
		// 	3 - работа
		// 	4 - услуга
		// 	5 - приём ставок при деятельность по организации и проведению азартных игр
		// 	6 - выплата выигрышей в азартных играх
		// 	7 - реализация лотерейных билетов или ставок при деятельность по организации и проведению лотерей
		// 	8 - выплата выигрышей в лотереях
		// 	9 -  прав на использование результатов интеллектуальной деятельности или средств индивидуализации
		// 	10 -  аванс, задаток, предоплата, кредит, взносе в счет оплаты, пени, штраф, вознаграждение, бонус и иной аналогичный предмет расчета
		// 	11 -  предмет расчета, состоящий из предметов, каждому из которых может быть присвоено значение от 0 до 10 (набор)
		// 	12 -  предмет расчета, не относящийся к предметам расчета, которым может быть присвоено значение от 0 до 11
		Попытка
			fptr.setParamInt( 1212, Док.ФФД_ПредметаРасчёта  );
		Исключение
			fptr.setParamInt( 1212, 10  );
		КонецПопытки;		
		
		//1214	Признак способа расчета	int
		// Признак способа расчёта. Свойство PaymentMode может принимать значения:
		// 	1 - Полная предварительная оплата до момента передачи предмета расчета
		// 	2 - Частичная предварительная оплата до момента передачи предмета расчета
		// 	3 - Аванс
		// 	4 - Полная оплата, в том числе с учетом аванса (предварительной оплаты) в момент передачи предмета расчета
		// 	5 - Частичная оплата предмета расчета в момент его передачи с последующей оплатой в кредит
		// 	6 - Передача предмета расчета без его оплаты в момент его передачи с последующей оплатой в кредит
		// 	7 - Оплата предмета расчета после его передачи с оплатой в кредит (оплата кредита)
		Попытка
			fptr.setParamInt( 1214, Док.ФФД_СпособРасчёта  );
		Исключение
			fptr.setParamInt( 1214, 7 );
		КонецПопытки;			

		////1222	Признак агента по предмету расчета	int
		//fptr.setParamInt( 1222, _cons.LIBFPTR_AT_NONE );
		
		////Регистрация позиции без расчета суммы налога
		fptr.setParamInt( _cons.LIBFPTR_PARAM_TAX_TYPE, _cons.LIBFPTR_TAX_VAT0);	// !!! НДС не облагается	
		//fptr.setParamInt( _cons.LIBFPTR_PARAM_USE_ONLY_TAX_TYPE, 1);
		Ответ = fptr.registration();		
		Ошибка( Ответ );
	    

		//Если Док.СтавкаНДС = Перечисление.СтавкиНДС.НДС10 Тогда
		//	fptr.setParamInt( _cons.LIBFPTR_PARAM_DEPARTMENT, 2 );
		//	fptr.setParamInt( _cons.LIBFPTR_PARAM_TAX_TYPE, _cons.LIBFPTR_TAX_VAT10 );
		//Иначе //18/20 %
		//	//Константы LIBFPTR_TAX_VAT20 и LIBFPTR_TAX_VAT120 передаются в ККТ теми же значениями, как и LIBFPTR_TAX_VAT18 и LIBFPTR_TAX_VAT118. ПО может работать с любыми из этих констант.
		//	fptr.setParam( _cons.LIBFPTR_PARAM_DEPARTMENT, 3 );
		//	fptr.setParam( _cons.LIBFPTR_PARAM_TAX_TYPE, _cons.LIBFPTR_TAX_VAT20  );
		//КонецЕсли;
		//
		//fptr.setParam( _cons.LIBFPTR_PARAM_TAX_SUM, 0); //При передаче значения 0 рассчитывается автоматически
		//fptr.registration();
	    //fptr.receiptTax();				
		
	КонецЕсли;
		
	fptr.setParamDouble(_cons.LIBFPTR_PARAM_SUM, док.СуммаВзаиморасчетов);
    Ответ = fptr.cashIncome();	
	Ошибка( Ответ );
	
    Ответ = fptr.closeReceipt();
	Ошибка( Ответ );	

КонецПроцедуры

// ---------- Чек Отгрузки без оплаты (в кредит) без отправки электронного чека покупателю ---------- 
Процедура ОтгрузкаБезОплаты(Док, Сторно=0)

	ОткрытьЧек( Док );	
		
  	тз = СоздатьОбъект("ТаблицаЗначений");
  	Док.ВыгрузитьТабличнуюЧасть(тз);
	тз.ВыбратьСтроки();
	Пока тз.ПолучитьСтроку() = 1 Цикл

	    fptr.setParamString( _cons.LIBFPTR_PARAM_COMMODITY_NAME,  ЗаменитьСпецСимволы(тз.Номенклатура.Наименование));
	    fptr.setParamDouble( _cons.LIBFPTR_PARAM_PRICE, тз.Цена);
	    fptr.setParamDouble( _cons.LIBFPTR_PARAM_QUANTITY, тз.Количество);	    

		//1212	Признак предмета расчета	int
		// Признак предмета расчёта. Свойство ItemType может принимать значения:
		// 	1 - товар, за исключением подакцизного товара
		// 	2 - подакцизный товар
		// 	3 - работа
		// 	4 - услуга
		// 	5 - приём ставок при деятельность по организации и проведению азартных игр
		// 	6 - выплата выигрышей в азартных играх
		// 	7 - реализация лотерейных билетов или ставок при деятельность по организации и проведению лотерей
		// 	8 - выплата выигрышей в лотереях
		// 	9 -  прав на использование результатов интеллектуальной деятельности или средств индивидуализации
		// 	10 -  аванс, задаток, предоплата, кредит, взносе в счет оплаты, пени, штраф, вознаграждение, бонус и иной аналогичный предмет расчета
		// 	11 -  предмет расчета, состоящий из предметов, каждому из которых может быть присвоено значение от 0 до 10 (набор)
		// 	12 -  предмет расчета, не относящийся к предметам расчета, которым может быть присвоено значение от 0 до 11
		fptr.setParamInt( 1212, 1  );
		
		//1214	Признак способа расчета	int
		// Признак способа расчёта. Свойство PaymentMode может принимать значения:
		// 	1 - Полная предварительная оплата до момента передачи предмета расчета
		// 	2 - Частичная предварительная оплата до момента передачи предмета расчета
		// 	3 - Аванс
		// 	4 - Полная оплата, в том числе с учетом аванса (предварительной оплаты) в момент передачи предмета расчета
		// 	5 - Частичная оплата предмета расчета в момент его передачи с последующей оплатой в кредит
		// 	6 - Передача предмета расчета без его оплаты в момент его передачи с последующей оплатой в кредит
		// 	7 - Оплата предмета расчета после его передачи с оплатой в кредит (оплата кредита)
		Попытка
			fptr.setParamInt( 1214, Док.ФФД_СпособРасчёта  );
		Исключение
			fptr.setParamInt( 1214, 6 );
		КонецПопытки;		

		//1222	Признак агента по предмету расчета	int
		//fptr.setParamInt( 1222, _cons.LIBFPTR_AT_NONE );
		
		////Регистрация позиции без расчета суммы налога
		//fptr.setParamInt( _cons.LIBFPTR_PARAM_TAX_TYPE, _cons.LIBFPTR_TAX_VAT0);		
		//fptr.setParamBool( _cons.LIBFPTR_PARAM_USE_ONLY_TAX_TYPE, fptr.TRUE() );		
	    //fptr.registration();		

		Если тз.СтавкаНДС = Перечисление.СтавкиНДС.НДС10 Тогда
			fptr.setParamInt( _cons.LIBFPTR_PARAM_DEPARTMENT, 2 );
			fptr.setParamInt( _cons.LIBFPTR_PARAM_TAX_TYPE, _cons.LIBFPTR_TAX_VAT10 );
		Иначе //18/20 %
			//Константы LIBFPTR_TAX_VAT20 и LIBFPTR_TAX_VAT120 передаются в ККТ теми же значениями, как и LIBFPTR_TAX_VAT18 и LIBFPTR_TAX_VAT118. ПО может работать с любыми из этих констант.
			fptr.setParamInt( _cons.LIBFPTR_PARAM_DEPARTMENT, 3 );
			fptr.setParamInt( _cons.LIBFPTR_PARAM_TAX_TYPE, _cons.LIBFPTR_TAX_VAT20  );
		КонецЕсли;

		Ответ = fptr.registration();
		Ошибка( Ответ );
		//fptr.setParamDouble( _cons.LIBFPTR_PARAM_TAX_SUM, тз.СуммаНДС);
	    //fptr.receiptTax();		
		
	КонецЦикла;
			
	////Допускается регистрация итога меньше суммы чека, но только в рамках копеек. Т.е., если общая сумма чека равна 1000.57, то можно зарегистрировать итог от 1000.00 до 1000.57.
	////Метод не является обязательным. Если его не использовать, сумма чека будет посчитана автоматически, без округлений копеек.
	//fptr.setParam( _cons.LIBFPTR_PARAM_SUM, док.СуммаВзаиморасчетов);
    //fptr.receiptTotal();
	
	//Способ расчета (LIBFPTR_PARAM_PAYMENT_TYPE) может принимать следующие значения:
	//LIBFPTR_PT_CASH - наличными
	//LIBFPTR_PT_ELECTRONICALLY - безналичными
	//LIBFPTR_PT_PREPAID - предварительная оплата (аванс)
	//LIBFPTR_PT_CREDIT - последующая оплата (кредит)
	//LIBFPTR_PT_OTHER - иная форма оплаты (встречное предоставление)
	//LIBFPTR_PT_6 - способ расчета №6
	//LIBFPTR_PT_7 - способ расчета №7
	//LIBFPTR_PT_8 - способ расчета №8
	//LIBFPTR_PT_9 - способ расчета №9
	//LIBFPTR_PT_10 - способ расчета №10
	fptr.setParamInt( _cons.LIBFPTR_PARAM_PAYMENT_TYPE, _cons.LIBFPTR_PT_CREDIT);	
	fptr.setParamDouble( _cons.LIBFPTR_PARAM_PAYMENT_SUM, док.СуммаВзаиморасчетов);
	Ответ = fptr.payment();
	Ошибка( Ответ );
	
    Ответ = fptr.closeReceipt();	
	Ошибка( Ответ );
	
КонецПроцедуры


Процедура Продажа(Док, сторно=0)

	//Если Док.Вид() = "ПКО" Тогда
	//		
	//	Если Док.Аванс =1 Тогда
	//		ПродажаАванса(Док, сторно);
	//	Иначе
	//		ПродажаПКО(Док, сторно);
	//	КонецЕсли;
		
	Если Док.Вид() = "Реализация" Тогда
		
		ОтгрузкаБезОплаты(Док, сторно);

	Иначе
		Сообщить("Вид документа неопределен = "+Док.Вид(),"!");
	КонецЕсли;
		

КонецПроцедуры

// --------------------------- Подключение к устройству -----------------------------//
Процедура ПодключениеФР()
	
	_cons = fptr.constants();
    fptr.setSingleSetting( _cons.LIBFPTR_SETTING_MODEL, Строка(_cons.LIBFPTR_MODEL_ATOL_AUTO) );
    fptr.setSingleSetting( _cons.LIBFPTR_SETTING_PORT, Строка(_cons.LIBFPTR_PORT_COM) );
	fptr.setSingleSetting( _cons.LIBFPTR_SETTING_COM_FILE, "COM"+НомерПорта);
    fptr.setSingleSetting( _cons.LIBFPTR_SETTING_BAUDRATE, Строка(_cons.LIBFPTR_PORT_BR_115200));
    fptr.applySingleSettings();
	
	//fptr.showProperties(_cons.LIBFPTR_GUI_PARENT_NATIVE, "дескриптор окна");
	
	ответ = fptr.open();
	Ошибка(Ответ);	
	
	Если fptr.isOpened()=0 Тогда 
		Ошибка("Порт не открыт ");
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьНомерЧека()
	
    fptr.setParam( _cons.LIBFPTR_PARAM_DATA_TYPE, _cons.LIBFPTR_DT_STATUS);
    fptr.queryData();
	
	НомерЧека = fptr.getParamInt( _cons.LIBFPTR_PARAM_RECEIPT_NUMBER );
	НомерДока = fptr.getParamInt( _cons.LIBFPTR_PARAM_DOCUMENT_NUMBER );
	
	возврат НомерЧека;
	
КонецФункции

 // предопределенная процедура
 Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
	
 	Если ЗначениеЗакладки="Основной" Тогда
		Форма.ИспользоватьСлой("Основной");
	Иначе //Если ЗначениеЗакладки="Группа" Тогда
		Форма.ИспользоватьСлой("Группа");
	КонецЕсли;
	
	Форма.Закладки.ТекущаяСтрока(НомерЗакладки);
	
КонецПроцедуры

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриОткрытии()
	
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Основной");
	Форма.Закладки.ДобавитьЗначение("Групповые обработки");

	Форма.ИспользоватьСлой("Основной");
	
	ПодключениеФР();

	Если ПустоеЗначение(Форма.Параметр) = 0 Тогда
		Док      = Форма.Параметр.Получить("Контекст");
		//Устройство = Форма.Параметр.Получить("Устройство");
		//КолвоКопий = Форма.Параметр.Получить("КоличествоКопий");
		//СразуНаПринтер = Число(Форма.Параметр.Получить("СразуПечать"));

		Если ТипЗначенияСтр(Док) = "Реализация" Тогда
			
			ОтгрузкаБезОплаты(Док);
			
		ИначеЕсли ТипЗначенияСтр(Док) = "ПКО" Тогда
		
		КонецЕсли;

		НомерЧека = ПолучитьНомерЧека();
		Попытка
			//НомерЧека =  ПолучитьНомерЧека();
			Форма.Параметр.Установить("НомерЧека", НомерЧека);
			//Форма.Параметр.Установить("НомерЧека", 123);
		Исключение
			Сообщить(ОписаниеОшибки());
			Форма.Параметр.Установить("НомерЧека", "");
		КонецПопытки;

		Статусвозврата(0);
		Возврат;
	КонецЕсли;

КонецПроцедуры // ПриОткрытии()

Процедура ПриЗакрытии()
	
	fptr.close();
	fptr = "";
	
КонецПроцедуры

//******************************************************************************
// ЗаполнитьПринтеры()
//
// Параметры:
//
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  ТекстОписания
//
Процедура ЗаполнитьПринтеры()
	Перем Стр;
	//очистим список
	Принтер.УдалитьВсе();

	//заполним список доступных принтеров
	Состояние("Заполняем список принтеров...");
    wshNetwork    = createObject("WScript.Network");
	oPrinters        = wshNetwork.EnumPrinterConnections();
	i = 0;
	Пока i < oPrinters.Count() - 1 Цикл
		Если Найти(oPrinters.Item(i+1),"\\tsclient") > 0 Тогда
			i = i + 2;
			Продолжить;
		КонецЕсли;
		Принтер.ДобавитьЗначение(oPrinters.Item(i+1),oPrinters.Item(i+1));
		i = i + 2;
	КонецЦикла;

    //    Принтер по умолчанию
    wshPrint = CreateObject("WScript.Shell");
    Prn = СокрЛП(wshPrint.RegRead("HKCU\Software\Microsoft\Windows NT\CurrentVersion\Windows\Device")); //принтер по умолчанию, но вместе с портом
	Сч =  1;
	Пока Сч <= Принтер.РазмерСписка() Цикл
		Принтер.ПолучитьЗначение(Сч,Стр);
		Если Найти(Prn,Стр) > 0 Тогда
			//Это и есть принтер по умолчанию
			Прервать;
		КонецЕсли;
		Сч = Сч + 1;
		Стр = "";
	КонецЦикла;
	Принтер.ТекущаяСтрока(Сч);
	Форма.Принтер.Доступность(1);

КонецПроцедуры // ЗаполнитьПринтеры()

//******************************************************************************
Процедура ПриИзмененииСразуНаПринтер()
	Если СразуНаПринтер=1 Тогда
		ЗаполнитьПринтеры();
	Иначе
		Принтер.УдалитьВсе();
		Форма.Принтер.Доступность(0);
	КонецЕсли;
КонецПроцедуры


//******************************************************************************
// ПоКнопкеПечать()
//
// Параметры:
//		ВыборФормы =
//   	1, если перед печатью необходимо выбрать печатную форму,
//		0, если надо напечатать, используя последнюю выбранную
//
// Описание:
// 	Вызывается по кнопке "Печать" и по кнопке "Выбор печатной формы" (небольшая
// 	кнопка рядом с кнопкой печати)
//
Процедура ПечатьПКО()

	Док = СоздатьОбъект("Документ.ПКО");
	Док.ВыбратьДокументы(НачДата,КонДата);

	Пока Док.ПолучитьДокумент()=1 Цикл
		Если Док.ПометкаУдаления()=1 Тогда Продолжить;  КонецЕсли;

		Попытка
			Если Выбклиент.Выбран()=1 Тогда
				Если НЕ (Док.Контрагент = Выбклиент) Тогда Продолжить; КонецЕсли;
			КонецЕсли;
		Исключение КонецПопытки;
		Попытка
			Если ВыбАвтор.Выбран()=1 Тогда
				Если НЕ (Док.Автор = ВыбАвтор) Тогда Продолжить; КонецЕсли;
			КонецЕсли;
		Исключение КонецПопытки;
		Попытка
			Если ВыбФилиал.Выбран()=1 Тогда
				Если НЕ (Док.Филиал = ВыбФилиал) Тогда Продолжить; КонецЕсли;
			КонецЕсли;
		Исключение КонецПопытки;

		ТекущийПринтер = "";
		Если СразуНаПринтер=1 Тогда
			Принтер.ПолучитьЗначение(Принтер.ТекущаяСтрока(),ТекущийПринтер);
		КонецЕсли;

		Параметры = СоздатьОбъект("СписокЗначений");
		//Параметры.ДобавитьЗначение(глВзятьКонтекст(Контекст), "Контекст");
		Параметры.ДобавитьЗначение(Док.ТекущийДокумент(), "Контекст");
		//Параметры.ДобавитьЗначение(СразуНаПринтер, "Устройство");

		Параметры.ДобавитьЗначение(ТекущийПринтер,	"Устройство");
		Параметры.ДобавитьЗначение(1,				"КоличествоКопий");
		Параметры.ДобавитьЗначение(СразуНаПринтер,	"СразуПечать");
		Параметры.ДобавитьЗначение(1,				"НеПоказыватьДиалог");
		Если СразуНаПринтер=1 Тогда
			Параметры.ДобавитьЗначение("ПечатьНаПринтер",	"Команда");
		Иначе
			Параметры.ДобавитьЗначение("ПечатьНаЭкран",	"Команда");
		КонецЕсли;

		//НомерТекущейФормы = ПечФорма.ТекущаяСтрока();
		//Если НомерТекущейФормы = 1  Тогда
		//	//глПечатьДокумента(Док.ТекущийДокумент(), Параметры); //?(СразуНаПринтер=0,"ПечатьНаЭкран","ПечатьНаПринтер")
		//	ОткрытьФорму(Док.ТекущийДокумент(),Параметры,1);
		//Иначе
			Сообщить("Печать "+Док);
			ОткрытьФорму("Отчет", Параметры, глКаталогПечФорм+"ПКО.ert");
		//КонецЕсли;
	КонецЦикла;
КонецПроцедуры // ПоКнопкеПечать()

//******************************************************************************
Процедура Реестр()
	Таб = СоздатьОбъект("Таблица");
	Таб.ВывестиСекцию("Шапка");

	Док = СоздатьОбъект("Документ.ПКО");
	Док.ВыбратьДокументы(НачДата,КонДата);

	Ном=0;
	Пока Док.ПолучитьДокумент()=1 Цикл
		Если Док.ПометкаУдаления()=1 Тогда Продолжить;  КонецЕсли;

		Попытка
			Если Выбклиент.Выбран()=1 Тогда
				Если НЕ (Док.Контрагент = Выбклиент) Тогда Продолжить; КонецЕсли;
			КонецЕсли;
		Исключение КонецПопытки;
		Попытка
			Если ВыбАвтор.Выбран()=1 Тогда
				Если НЕ (Док.Автор = ВыбАвтор) Тогда Продолжить; КонецЕсли;
			КонецЕсли;
		Исключение КонецПопытки;
		Попытка
			Если ВыбФилиал.Выбран()=1 Тогда
				Если НЕ (Док.Филиал = ВыбФилиал) Тогда Продолжить; КонецЕсли;
			КонецЕсли;
		Исключение КонецПопытки;

		Ном=Ном+1;
		Сумма="";
		Попытка
			Сумма = Док.СуммаВзаиморасчетов;
		Исключение
			Попытка
				Сумма = Док.ДокОснование.СуммаВзаиморасчетов;
			Исключение
			КонецПопытки
		КонецПопытки;
		Таб.ВывестиСекцию("Строка");
	КонецЦикла;

	Таб.ТолькоПросмотр(1);
	Таб.Показать("Реестр");
КонецПроцедуры

//******************************************************************************

//Процедура ИспользоватьЭмулятор()
//	
//	Если ТестовыйРежим=0 Тогда 
//		// создаем объект общего драйвера ККМ
//		// если объект создать не удается генерируется исключение, по которому завершается работа приложения
//		Если ЗагрузитьВнешнююКомпоненту("FPRNM1C.dll") <> 0  Тогда
//			Попытка
//				ECR = СоздатьОбъект("AddIn.FprnM45");
//			исключение
//				Предупреждение("Ошибка при создании объекта AddIn.FprnM45");
//			конецпопытки;
//		Иначе
//			Предупреждение("Ошибка загрузки внешней компоненты FPRNM1C.dll");
//		КонецЕсли;
//	Иначе
//		// создаем объект общего драйвера ККМ
//		// если объект создать не удается генерируется исключение, по которому завершается работа приложения
//		Если ЗагрузитьВнешнююКомпоненту("FPEmulator1C.dll") <> 0  Тогда
//			Попытка
//				ECR = СоздатьОбъект("AddIn.EmulatorFP1C");
//			исключение
//				Предупреждение("Ошибка при создании объекта AddIn.EmulatorFP1C");
//			конецпопытки;
//		Иначе
//			Предупреждение("Ошибка загрузки внешней компоненты FPEmulator1C.dll");
//		КонецЕсли;
//	КонецЕсли;
//
//КонецПроцедуры

Процедура ВерсияДрайвера()
	
	Сообщить("Версия "+ fptr.version() );

	fptr.setParamInt(_cons.LIBFPTR_PARAM_DATA_TYPE, _cons.LIBFPTR_DT_STATUS);
    Ответ = fptr.queryData();	
	Ошибка(Ответ);	
	
	Сообщить("    operatorID      := " + fptr.getParamInt(_cons.LIBFPTR_PARAM_OPERATOR_ID) );
	Сообщить("    logicalNumber   := " + fptr.getParamInt(_cons.LIBFPTR_PARAM_LOGICAL_NUMBER) );
	Сообщить("    shiftState      := " + fptr.getParamInt(_cons.LIBFPTR_PARAM_SHIFT_STATE) );
	Сообщить("    model           := " + fptr.getParamInt(_cons.LIBFPTR_PARAM_MODEL) );
	Сообщить("    mode            := " + fptr.getParamInt(_cons.LIBFPTR_PARAM_MODE) );
	Сообщить("    submode         := " + fptr.getParamInt(_cons.LIBFPTR_PARAM_SUBMODE) );
	Сообщить("    receiptNumber   := " + fptr.getParamInt(_cons.LIBFPTR_PARAM_RECEIPT_NUMBER) );
	Сообщить("    documentNumber  := " + fptr.getParamInt(_cons.LIBFPTR_PARAM_DOCUMENT_NUMBER) );
	Сообщить("    shiftNumber     := " + fptr.getParamInt(_cons.LIBFPTR_PARAM_SHIFT_NUMBER) );
	Сообщить("    receiptType     := " + fptr.getParamInt(_cons.LIBFPTR_PARAM_RECEIPT_TYPE) );
	Сообщить("    lineLength      := " + fptr.getParamInt(_cons.LIBFPTR_PARAM_RECEIPT_LINE_LENGTH) );
	Сообщить("    lineLengthPix   := " + fptr.getParamInt(_cons.LIBFPTR_PARAM_RECEIPT_LINE_LENGTH_PIX) );
	Сообщить("    receiptSum  := " + fptr.getParamDouble(_cons.LIBFPTR_PARAM_RECEIPT_SUM) );
	Сообщить("    isFiscalDevice          := " + fptr.getParamBool(_cons.LIBFPTR_PARAM_FISCAL) );
	Сообщить("    isFiscalFN              := " + fptr.getParamBool(_cons.LIBFPTR_PARAM_FN_FISCAL) );
	Сообщить("    isFNPresent             := " + fptr.getParamBool(_cons.LIBFPTR_PARAM_FN_PRESENT) );
	Сообщить("    isInvalidFN             := " + fptr.getParamBool(_cons.LIBFPTR_PARAM_INVALID_FN) );
	Сообщить("    isCashDrawerOpened      := " + fptr.getParamBool(_cons.LIBFPTR_PARAM_CASHDRAWER_OPENED) );
	Сообщить("    isPaperPresent          := " + fptr.getParamBool(_cons.LIBFPTR_PARAM_RECEIPT_PAPER_PRESENT) );
	Сообщить("    isPaperNearEnd          := " + fptr.getParamBool(_cons.LIBFPTR_PARAM_PAPER_NEAR_END) );
	Сообщить("    isCoverOpened           := " + fptr.getParamBool(_cons.LIBFPTR_PARAM_COVER_OPENED) );
	Сообщить("    isPrinterConnectionLost := " + fptr.getParamBool(_cons.LIBFPTR_PARAM_PRINTER_CONNECTION_LOST) );
	Сообщить("    isPrinterError          := " + fptr.getParamBool(_cons.LIBFPTR_PARAM_PRINTER_ERROR) );
	Сообщить("    isCutError              := " + fptr.getParamBool(_cons.LIBFPTR_PARAM_CUT_ERROR) );
	Сообщить("    isPrinterOverheat       := " + fptr.getParamBool(_cons.LIBFPTR_PARAM_PRINTER_OVERHEAT) );
	Сообщить("    isDeviceBlocked         := " + fptr.getParamBool(_cons.LIBFPTR_PARAM_BLOCKED) );
	Сообщить("    dateTime  := " + fptr.getParamDateTime(_cons.LIBFPTR_PARAM_DATE_TIME) );
	Сообщить("    serialNumber    := " + fptr.getParamString(_cons.LIBFPTR_PARAM_SERIAL_NUMBER) );
	Сообщить("    modelName       := " + fptr.getParamString(_cons.LIBFPTR_PARAM_MODEL_NAME) );
	Сообщить("    firmwareVersion := " + fptr.getParamString(_cons.LIBFPTR_PARAM_UNIT_VERSION) );
	
КонецПроцедуры

НачДата = ТекущаяДата();
КонДата = ТекущаяДата();
ВыбАвтор = глПользователь;
ВыбКасса = глПользователь.ОсновнаяКасса;

// ОШИБКА: отсутствует интерфейс IInitDone
//
//ИмяКомпоненты = "addin_fptr10_x86.dll";
//ИмяКомпоненты = "addin_fptr10_x64.dll";
//ИмяКомпоненты = "fptr10.dll";
//Если ЗагрузитьВнешнююКомпоненту(ИмяКомпоненты) <> 0  Тогда
//
//	Попытка
//		fptr = СоздатьОбъект("AddIn.Fptr10");
//	исключение
//		Сообщить("Ошибка при создании объекта "+ИмяКомпоненты,"!");
//	конецпопытки;
//Иначе
//	Сообщить("Ошибка загрузки внешней компоненты "+ИмяКомпоненты+"
//	|"+ОписаниеОшибки(),"");
//КонецЕсли;
//

//ИмяКомпоненты = "AddIn.Fptr10";
ИмяКомпоненты = "AddIn.Fptr10_kb99";
Сообщить("Подключаем ["+ИмяКомпоненты+"] ");
Попытка
	ПодключитьВнешнююКомпоненту(ИмяКомпоненты);
	fptr = СоздатьОбъект(ИмяКомпоненты);
Исключение
	ошибка = "Компонента ["+ИмяКомпоненты+"] не зарегистрирована ";
	Сообщить(Ошибка + ОписаниеОшибки(),"!"); 	
КонецПопытки;

НомерПорта = 6;