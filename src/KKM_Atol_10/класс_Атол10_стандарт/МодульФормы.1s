//http://integration.atol.ru/api/?pascal#1afc0993f9

Перем fptr;  // Компонента 

//Служебные функции
Функция Этот(Конт) 	Возврат Конт; КонецФункции
Функция Сам() 	Возврат Этот(Контекст); КонецФункции

Процедура Ошибка(Ответ, Сообщ="", знак="!")
	Если Ответ<>0 Тогда
		Сообщить("Ответ = "+Ответ+" "+Сообщ + "#"+ fptr.errorCode() + "= ["+ fptr.errorDescription() +"]", знак);
	КонецЕсли;
КонецПроцедуры

// --------------------------- Подключение к устройству -----------------------------//
Процедура ПодключениеФР( НомерПорта=3 ) Экспорт
	
	Попытка
		//fptr = fptr.constants();
		
	    fptr.setSingleSetting( fptr.LIBFPTR_SETTING_MODEL, Строка(fptr.LIBFPTR_MODEL_ATOL_AUTO) );
	    fptr.setSingleSetting( fptr.LIBFPTR_SETTING_PORT, Строка(fptr.LIBFPTR_PORT_COM) );
		fptr.setSingleSetting( fptr.LIBFPTR_SETTING_COM_FILE, "COM"+НомерПорта);
	    fptr.setSingleSetting( fptr.LIBFPTR_SETTING_BAUDRATE, Строка(fptr.LIBFPTR_PORT_BR_115200));
	    fptr.applySingleSettings();
		
		//fptr.showProperties(fptr.LIBFPTR_GUI_PARENT_NATIVE, "дескриптор окна");
		
		ответ = fptr.open();
		Ошибка(Ответ);	
		
		Если fptr.isOpened()=0 Тогда 
			Ошибка("Порт не открыт ");
		КонецЕсли;
	Исключение
		ошибка = "Компонента [AddIn.Fptr10_kb99] не подключена ";
		Сообщить(Ошибка + ОписаниеОшибки(),"!"); 	
	КонецПопытки;	
	
КонецПроцедуры

//https://htmlweb.ru/html/symbols.php
Функция ЗаменитьСпецСимволы(Стр) 
    Рез = СокрЛП(Стр);
	Рез = СтрЗаменить(Рез,"&" ,"&amp;" );
	Рез = СтрЗаменить(Рез,"""","");
	Рез = СтрЗаменить(Рез,"<" ,"&lt;"  );
	Рез = СтрЗаменить(Рез,">" ,"&gt;"  );
	Рез = СтрЗаменить(Рез,"'" ,"");
	Рез = СтрЗаменить(Рез,"№" ,"#");
	//Рез = СтрЗаменить(Рез,"/" ,"//");
	Возврат Рез;
КонецФункции

Функция ПолучитьИНН(ВыбКлиент) экспорт

	//стандартное поведение функции
	Попытка
		ИННКПП = ВыбКлиент.ЮрФизЛицо.ИНН;
	Исключение
		ИННКПП = "";
	КонецПопытки;

	Если Найти(ИННКПП, "\") <> 0 Тогда
		// найден разделитель
		Возврат Лев(ИННКПП, Найти(ИННКПП, "\") - 1);

	ИначеЕсли Найти(ИННКПП, "/") <> 0 Тогда
		// найден разделитель
		Возврат Лев(ИННКПП, Найти(ИННКПП, "/") - 1);
	Иначе
		Возврат СокрЛП(ИННКПП);
	КонецЕсли;
КонецФункции // ПолучитьИНН() 

Процедура ДобавитьКассира( ВыбКасса )
	
	Попытка
		Кассир = ВыбКасса.ПКОКассир.Получить(ТекущаяДата());
	Исключение
		Кассир = глПользователь;
	КонецПопытки;
	
	Попытка
		Инн = Кассир.ИНН;
	Исключение
		Инн ="";
	КонецПопытки;
	
	
	Если ПустоеЗначение(ИНН)=1 Тогда
		Предупреждение("Не указан ИНН пользователя / кассира");		
		//СтатусВозврата(0);
		//Возврат;		
	КонецЕсли;	
	
  	fptr.setParam(1021, СокрЛП( Кассир.Наименование ) );
    fptr.setParam(1203, СокрЛП( ИНН ));
    fptr.operatorLogin();
	
КонецПроцедуры

// // ---------------------------------- Открыть смену ------------------------------------//
Процедура ОткрытьСмену( ВыбКасса ) Экспорт
	
	ДобавитьКассира( ВыбКасса );

    Ответ = fptr.openShift();
	Ошибка(Ответ);	
	
    Ответ = fptr.checkDocumentClosed();		
	Ошибка(Ответ);	
	
КонецПроцедуры

// // ---------------------------------- Закрыть смену -------------------------------------//
Процедура ЗакрытьСмену( ВыбКасса ) Экспорт
	
	ДобавитьКассира( ВыбКасса );
	
    fptr.setParam( fptr.LIBFPTR_PARAM_REPORT_TYPE, fptr.LIBFPTR_RT_CLOSE_SHIFT);
    Ответ = fptr.report();
	Ошибка(Ответ);	

    Ответ = fptr.checkDocumentClosed();	
	Ошибка(Ответ);		
	
КонецПроцедуры

//{ Отчеты

// // ------------------------- Отчёт о состоянии расчётов ------------------------------//
Процедура ОтчётОСостоянииРасчётов() Экспорт
	
    fptr.setParam( fptr.LIBFPTR_PARAM_REPORT_TYPE, fptr.LIBFPTR_RT_OFD_EXCHANGE_STATUS);
    Ответ = fptr.report();	
	Ошибка(Ответ);	

КонецПроцедуры

Процедура ОтчетХ() Экспорт
	
	fptr.setParam( fptr.LIBFPTR_PARAM_REPORT_TYPE, fptr.LIBFPTR_RT_X);
    Ответ = fptr.report();	
	Ошибка(Ответ);	
	
КонецПроцедуры

Процедура ОтчетСостояниеСвязи() Экспорт
	
	fptr.setParam( fptr.LIBFPTR_PARAM_REPORT_TYPE, fptr.LIBFPTR_RT_OFD_TEST);
    Ответ = fptr.report();
	Ошибка(Ответ);	
	
    fptr.setParam( fptr.LIBFPTR_PARAM_FN_DATA_TYPE, fptr.LIBFPTR_FNDT_OFD_EXCHANGE_STATUS);
    Ответ = fptr.fnQueryData();
	Ошибка(Ответ);	
	
	Сообщить("    exchangeStatus      := " + fptr.getParamInt( fptr.LIBFPTR_PARAM_OFD_EXCHANGE_STATUS) );
	Сообщить("    unsentCount         := " + fptr.getParamInt( fptr.LIBFPTR_PARAM_DOCUMENTS_COUNT) );
	Сообщить("    firstUnsentNumber   := " + fptr.getParamInt( fptr.LIBFPTR_PARAM_DOCUMENT_NUMBER) );
	Сообщить("    ofdMessageRead      := " + fptr.getParamBool( fptr.LIBFPTR_PARAM_OFD_MESSAGE_READ) );
	Сообщить("    dateTime            := " + fptr.getParamDateTime( fptr.LIBFPTR_PARAM_DATE_TIME) );

КонецПроцедуры


// // ---------------------------------- Поддерживаемая версия ФФД ------------------------------------//
Процедура ВерсияФФД() Экспорт
	
//	fptr.setParam( fptr.LIBFPTR_PARAM_DATA_TYPE, fptr.LIBFPTR_DT_SHORT_STATUS);
//    Ответ = fptr.queryData();
//
//	Сообщить("    isCashDrawerOpened      := " + fptr.getParamBool(fptr.LIBFPTR_PARAM_CASHDRAWER_OPENED) );
//	Сообщить("    isPaperPresent          := " + fptr.getParamBool(fptr.LIBFPTR_PARAM_RECEIPT_PAPER_PRESENT) );
//	Сообщить("    isPaperNearEnd          := " + fptr.getParamBool(fptr.LIBFPTR_PARAM_PAPER_NEAR_END) );
//	Сообщить("    isCoverOpened           := " + fptr.getParamBool(fptr.LIBFPTR_PARAM_COVER_OPENED) );
	
	fptr.setParam( fptr.LIBFPTR_PARAM_FN_DATA_TYPE, fptr.LIBFPTR_FNDT_FFD_VERSIONS);
    Ответ = fptr.fnQueryData();
	Ошибка(Ответ);	
	
	Сообщить("    deviceFfdVersion    := " + fptr.getParamInt( fptr.LIBFPTR_PARAM_DEVICE_FFD_VERSION) );
	Сообщить("    fnFfdVersion        := " + fptr.getParamInt( fptr.LIBFPTR_PARAM_FN_FFD_VERSION) );
	Сообщить("    ffdVersion          := " + fptr.getParamInt( fptr.LIBFPTR_PARAM_FFD_VERSION) );
	Сообщить("    maxFfdVersion       := " + fptr.getParamInt( fptr.LIBFPTR_PARAM_DEVICE_MAX_FFD_VERSION) );
	Сообщить("    minFfdVersion       := " + fptr.getParamInt( fptr.LIBFPTR_PARAM_DEVICE_MIN_FFD_VERSION) );

КонецПроцедуры

//} отчеты


Процедура НастройкаСвойств() Экспорт
	
	fptr.showProperties(fptr.LIBFPTR_GUI_PARENT_NATIVE );

КонецПроцедуры

Процедура ОтменитьЧек()
	
	fptr.cancelReceipt();
	
КонецПроцедуры

//{ =============== Чек ========================

Функция НомерНаПечать(Док)
	
	Номер=СокрЛП(Док.НомерДок);
	Номер=Сред(Номер, 2);
	// в документах, перенессеных из старых редакций, может остаться "минус" впереди
	Если Лев(Номер, 1) = "-" Тогда
		Номер	= Сред(Номер, 2);
	КонецЕсли;

	// удаление ведущих нулей
	Пока Лев(Номер, 1)="0" Цикл
		Номер=Сред(Номер, 2);
	КонецЦикла;

	Номер = СокрЛП(Номер + Док.Филиал.НомерДляСФ);

	Возврат Номер;
КонецФункции

//Формирование чека состоит из следующих операций:
//
//открытие чека и передача реквизитов чека
//регистрация позиций, печать нефискальных данных (текст, штрихкоды, изображения)
//регистрация итога (необязательный пункт - если регистрацию итога не провести, он автоматически расчитается из суммы всех позиций)
//регистрация налогов на чек (необязательный пункт - налоги могут быть подтянуты из позиций и суммированы)
//регистрация оплат
//закрытие чека
//проверка состояния чека
Процедура ОткрытьЧек( ВыбКасса, Док )
	
	ДобавитьКассира( ВыбКасса );
		
	//Открытие печатного чека
	//Возможные значения для типа открытого чека (LIBFPTR_PARAM_RECEIPT_TYPE):
	//LIBFPTR_RT_CLOSED - чек закрыт
	//LIBFPTR_RT_SELL - чек прихода
	//LIBFPTR_RT_SELL_RETURN - чек возврата прихода
	//LIBFPTR_RT_SELL_CORRECTION - чек коррекции прихода
	//LIBFPTR_RT_BUY - чек расхода
	//LIBFPTR_RT_BUY_RETURN - чек возврата расхода
	//LIBFPTR_RT_BUY_CORRECTION - чек коррекции расхода	
   	fptr.setParam( fptr.LIBFPTR_PARAM_RECEIPT_TYPE, fptr.LIBFPTR_RT_SELL);
	
	////Открытие электронного чека
	//Чтобы чек не печатался (электронный чек), нужно установить параметру LIBFPTR_PARAM_RECEIPT_ELECTRONICALLY значение true и передать реквизит 1008 (электронный адрес или телефон получателя).	
    //fptr.setParam( fptr.LIBFPTR_PARAM_RECEIPT_TYPE, fptr.LIBFPTR_RT_SELL);
    //fptr.setParam( fptr.LIBFPTR_PARAM_RECEIPT_ELECTRONICALLY, 1);
	//1008	Электронный адрес / телефон получателя	string
    fptr.setParam(1008, СокрЛП(Док.Контрагент.ЭлПочта) );

	//1227	Наименование получателя	string
	fptr.setParam(1227, ЗаменитьСпецСимволы(Док.Контрагент.ЮрФизЛицо.ПолнНаименование) );
	//1228	ИНН получателя	string
	fptr.setParam(1228, ПолучитьИНН(Док.Контрагент) );
	//1117	Электронный адрес отправителя чека	string
	fptr.setParam(1117, Док.Фирма.ЭлПочта );
	//1055	Применяемая система налогообложения (СНО)	int
	fptr.setParam(1055, fptr.LIBFPTR_TT_OSN );
	//1187	Место расчета	string
	//1060	Адрес сайта ФНС	string
	//1057	Признак агента	int
	fptr.setParam(1055, fptr.LIBFPTR_AT_NONE );
	//1171	Телефон поставщика	string
	//fptr.setParam(1171, СокрЛП(Док.Фирма.ЮрЛицо.Телефоны) );
	//1044	Операция платежного агента	string
	//1073	Телефон платежного агента (может повторяться несколько раз)	string
	//1005	Адрес оператора перевода	string
	//1016	ИНН оператора перевода	string
	//1026	Наименование оператора перевода	string
	//1075	Телефон оператора перевода (может повторяться несколько раз)	string
	//1074	Телефон оператора по приему платежей (может повторяться несколько раз)	string
	//1084	Дополнительный реквизит пользователя	bytearray
	//1192	Дополнительный реквизит чека (БСО)	string
		
    Ответ = fptr.openReceipt();	
	//Ошибка( Ответ );

	//fptr.setParam( fptr.LIBFPTR_PARAM_TEXT, "ИНН покупателя: "+ПолучитьИНН(Док.Контрагент) );
    //fptr.printText();
	
КонецПроцедуры


Функция УстановитьСтавкуНДС( док )
	
	Если (Док.СтавкаНДС = Перечисление.СтавкиНДС.НДС18) или (Док.СтавкаНДС = Перечисление.СтавкиНДС.НДС20) Тогда
		//Константы LIBFPTR_TAX_VAT20 и LIBFPTR_TAX_VAT120 передаются в ККТ теми же значениями, 
		//как и LIBFPTR_TAX_VAT18 и LIBFPTR_TAX_VAT118. 
		//ПО может работать с любыми из этих констант.
		fptr.setParam( fptr.LIBFPTR_PARAM_DEPARTMENT, 3 );
		fptr.setParam( fptr.LIBFPTR_PARAM_TAX_TYPE, fptr.LIBFPTR_TAX_VAT20  );
	ИначеЕсли (Док.СтавкаНДС = Перечисление.СтавкиНДС.НДС18_118) или (Док.СтавкаНДС = Перечисление.СтавкиНДС.НДС20_120) Тогда
		//Константы LIBFPTR_TAX_VAT20 и LIBFPTR_TAX_VAT120 передаются в ККТ теми же значениями, 
		//как и LIBFPTR_TAX_VAT18 и LIBFPTR_TAX_VAT118. 
		//ПО может работать с любыми из этих констант.
		fptr.setParam( fptr.LIBFPTR_PARAM_DEPARTMENT, 3 );
		fptr.setParam( fptr.LIBFPTR_PARAM_TAX_TYPE, fptr.LIBFPTR_TAX_VAT120  );
	ИначеЕсли (Док.СтавкаНДС = Перечисление.СтавкиНДС.НДС10_110) Тогда
		fptr.setParam( fptr.LIBFPTR_PARAM_DEPARTMENT, 2 );
		fptr.setParam( fptr.LIBFPTR_PARAM_TAX_TYPE, fptr.LIBFPTR_TAX_VAT110  );
	Иначе // 10%  = Авто
		fptr.setParam( fptr.LIBFPTR_PARAM_DEPARTMENT, 2 );
		fptr.setParam( fptr.LIBFPTR_PARAM_TAX_TYPE, fptr.LIBFPTR_TAX_VAT10 );
	КонецЕсли;	
	
КонецФункции

Функция ПолучитьНомерЧека(НомерДока=0) Экспорт

	//Нефискальный номер (внутренний номер)	
    //fptr.setParam( fptr.LIBFPTR_PARAM_DATA_TYPE, fptr.LIBFPTR_DT_STATUS);
	//fptr.setParam( fptr.LIBFPTR_PARAM_DATA_TYPE, fptr.LIBFPTR_DT_RECEIPT_STATE);
    //fptr.queryData();
	//
	//Попытка
	//	НомерЧека = fptr.getParamInt( fptr.LIBFPTR_PARAM_RECEIPT_NUMBER ); 
	//Исключение 
	//		НомерЧека=0; 
	//КонецПопытки;
	//Попытка
	//	НомерДока = fptr.getParamInt( fptr.LIBFPTR_PARAM_DOCUMENT_NUMBER );
	//Исключение
	//	НомерДока =0;
	//КонецПопытки;

	//Фискальный НомерЧека	
	fptr.setParam(fptr.LIBFPTR_PARAM_FN_DATA_TYPE, fptr.LIBFPTR_FNDT_LAST_DOCUMENT);
    fptr.fnQueryData();

    НомерЧека  = fptr.getParamInt( fptr.LIBFPTR_PARAM_DOCUMENT_NUMBER);

    fiscalSign = fptr.getParamString( fptr.LIBFPTR_PARAM_FISCAL_SIGN);

    dateTime   = fptr.getParamDateTime( fptr.LIBFPTR_PARAM_DATE_TIME);	
	
	возврат НомерЧека;
	
КонецФункции

Функция ЗаписатьНомерЧека( док, НомерЧека )
	
	Попытка
		Если ПустоеЗначение(Док.НомерЧекаККМ)=0 Тогда
			
			Сообщить("Для документа уже введен чек "+Док.НомерЧекаККМ+" создан новый чек "+НомерЧека,"!!");
			Сообщить("Для документа новый номер чека "+НомерЧека+" НЕ ЗАПИСАН ","!!");
		
		Иначе
			
			ДокОбъект = СоздатьОбъект("Документ");
			ДокОбъект.НайтиДокумент(Док);
			ДокОбъект.НомерЧекаККМ = НомерЧека;
			ДокОбъект.Записать();
			
		КонецЕсли;
		
	Исключение
		Сообщить("Номер чека "+НомерЧека+" не записан в документ "+ДокОбъект+" 
		|"+ОписаниеОшибки());
	КонецПопытки;
	
КонецФункции

Функция ОПЛАТА( ВыбКасса, Док ) Экспорт

	ОткрытьЧек( ВыбКасса, Док );
	
	Если Док.ДокОснование.Вид() = "РеализацияПрочее" Тогда

 		fptr.setParam( fptr.LIBFPTR_PARAM_COMMODITY_NAME,  ЗаменитьСпецСимволы(Док.Приложение) );
	    fptr.setParam( fptr.LIBFPTR_PARAM_PRICE, Док.СуммаВзаиморасчетов);
	    fptr.setParam( fptr.LIBFPTR_PARAM_QUANTITY, 1);	    

		//1212	Признак предмета расчета	int
		// Признак предмета расчёта. Свойство ItemType может принимать значения:
		// 	1 - товар, за исключением подакцизного товара
		// 	2 - подакцизный товар
		// 	3 - работа
		// 	4 - услуга
		// 	5 - приём ставок при деятельность по организации и проведению азартных игр
		// 	6 - выплата выигрышей в азартных играх
		// 	7 - реализация лотерейных билетов или ставок при деятельность по организации и проведению лотерей
		// 	8 - выплата выигрышей в лотереях
		// 	9 -  прав на использование результатов интеллектуальной деятельности или средств индивидуализации
		// 	10 -  аванс, задаток, предоплата, кредит, взносе в счет оплаты, пени, штраф, вознаграждение, бонус и иной аналогичный предмет расчета
		// 	11 -  предмет расчета, состоящий из предметов, каждому из которых может быть присвоено значение от 0 до 10 (набор)
		// 	12 -  предмет расчета, не относящийся к предметам расчета, которым может быть присвоено значение от 0 до 11
		Попытка
			fptr.setParam( 1212, Док.ФФД_ПредметаРасчёта  );
		Исключение
			fptr.setParam( 1212, 10  );
		КонецПопытки;		
		
		//1214	Признак способа расчета	int
		// Признак способа расчёта. Свойство PaymentMode может принимать значения:
		// 	1 - Полная предварительная оплата до момента передачи предмета расчета
		// 	2 - Частичная предварительная оплата до момента передачи предмета расчета
		// 	3 - Аванс
		// 	4 - Полная оплата, в том числе с учетом аванса (предварительной оплаты) в момент передачи предмета расчета
		// 	5 - Частичная оплата предмета расчета в момент его передачи с последующей оплатой в кредит
		// 	6 - Передача предмета расчета без его оплаты в момент его передачи с последующей оплатой в кредит
		// 	7 - Оплата предмета расчета после его передачи с оплатой в кредит (оплата кредита)
		Попытка
			fptr.setParam( 1214, Док.ФФД_СпособРасчёта  );
		Исключение
			fptr.setParam( 1214, 7 );
		КонецПопытки;			

		////1222	Признак агента по предмету расчета	int
		//fptr.setParam( 1222, fptr.LIBFPTR_AT_NONE );
		
		////Регистрация позиции без расчета суммы налога
		fptr.setParam( fptr.LIBFPTR_PARAM_TAX_TYPE, fptr.LIBFPTR_TAX_VAT0);	// !!! НДС не облагается	
		//fptr.setParam( fptr.LIBFPTR_PARAM_USE_ONLY_TAX_TYPE, 1);
		Ответ = fptr.registration();		
		Ошибка( Ответ );
	    

		//Если Док.СтавкаНДС = Перечисление.СтавкиНДС.НДС10 Тогда
		//	fptr.setParam( fptr.LIBFPTR_PARAM_DEPARTMENT, 2 );
		//	fptr.setParam( fptr.LIBFPTR_PARAM_TAX_TYPE, fptr.LIBFPTR_TAX_VAT10 );
		//Иначе //18/20 %
		//	//Константы LIBFPTR_TAX_VAT20 и LIBFPTR_TAX_VAT120 передаются в ККТ теми же значениями, как и LIBFPTR_TAX_VAT18 и LIBFPTR_TAX_VAT118. ПО может работать с любыми из этих констант.
		//	fptr.setParam( fptr.LIBFPTR_PARAM_DEPARTMENT, 3 );
		//	fptr.setParam( fptr.LIBFPTR_PARAM_TAX_TYPE, fptr.LIBFPTR_TAX_VAT20  );
		//КонецЕсли;
		//
		//fptr.setParam( fptr.LIBFPTR_PARAM_TAX_SUM, 0); //При передаче значения 0 рассчитывается автоматически
		//fptr.registration();
	    //fptr.receiptTax();	
		
	ИначеЕсли Док.Аванс=1 Тогда
		//Предоплата 
		
	    fptr.setParam( fptr.LIBFPTR_PARAM_COMMODITY_NAME,  "предоплата за мясопродукцию из мяса птицы в ассортименте по договору" );
	    fptr.setParam( fptr.LIBFPTR_PARAM_PRICE, Док.Сумма);
	    fptr.setParam( fptr.LIBFPTR_PARAM_QUANTITY, 1);	    

		//1212	Признак предмета расчета	int
		// Признак предмета расчёта. Свойство ItemType может принимать значения:
		// 	1 - товар, за исключением подакцизного товара
		// 	2 - подакцизный товар
		// 	3 - работа
		// 	4 - услуга
		// 	5 - приём ставок при деятельность по организации и проведению азартных игр
		// 	6 - выплата выигрышей в азартных играх
		// 	7 - реализация лотерейных билетов или ставок при деятельность по организации и проведению лотерей
		// 	8 - выплата выигрышей в лотереях
		// 	9 -  прав на использование результатов интеллектуальной деятельности или средств индивидуализации
		// 	10 -  аванс, задаток, предоплата, кредит, взносе в счет оплаты, пени, штраф, вознаграждение, бонус и иной аналогичный предмет расчета
		// 	11 -  предмет расчета, состоящий из предметов, каждому из которых может быть присвоено значение от 0 до 10 (набор)
		// 	12 -  предмет расчета, не относящийся к предметам расчета, которым может быть присвоено значение от 0 до 11
		Попытка
			fptr.setParam( 1212, Док.ФФД_ПредметаРасчёта  );
		Исключение
			fptr.setParam( 1212, 10  );
		КонецПопытки;		
		
		//1214	Признак способа расчета	int
		// Признак способа расчёта. Свойство PaymentMode может принимать значения:
		// 	1 - Полная предварительная оплата до момента передачи предмета расчета
		// 	2 - Частичная предварительная оплата до момента передачи предмета расчета
		// 	3 - Аванс
		// 	4 - Полная оплата, в том числе с учетом аванса (предварительной оплаты) в момент передачи предмета расчета
		// 	5 - Частичная оплата предмета расчета в момент его передачи с последующей оплатой в кредит
		// 	6 - Передача предмета расчета без его оплаты в момент его передачи с последующей оплатой в кредит
		// 	7 - Оплата предмета расчета после его передачи с оплатой в кредит (оплата кредита)
		Попытка
			fptr.setParam( 1214, Док.ФФД_СпособРасчёта  );
		Исключение
			fptr.setParam( 1214, 2 );
		КонецПопытки;			

		////1222	Признак агента по предмету расчета	int
		//fptr.setParam( 1222, fptr.LIBFPTR_AT_NONE );
		
		////Регистрация позиции без расчета суммы налога
		//fptr.setParam( fptr.LIBFPTR_PARAM_TAX_TYPE, fptr.LIBFPTR_TAX_VAT0);		
		//fptr.setParam( fptr.LIBFPTR_PARAM_USE_ONLY_TAX_TYPE, 1);
		//fptr.registration();		
	    

		УстановитьСтавкуНДС( док );
		
		fptr.setParam( fptr.LIBFPTR_PARAM_TAX_SUM, 0); //При передаче значения 0 рассчитывается автоматически
		Ответ = fptr.registration();		
		Ошибка( Ответ );
	    //fptr.receiptTax();		
			
		////Допускается регистрация итога меньше суммы чека, но только в рамках копеек. Т.е., если общая сумма чека равна 1000.57, то можно зарегистрировать итог от 1000.00 до 1000.57.
		////Метод не является обязательным. Если его не использовать, сумма чека будет посчитана автоматически, без округлений копеек.
		//fptr.setParam( fptr.LIBFPTR_PARAM_SUM, док.СуммаВзаиморасчетов);
	    //fptr.receiptTotal();
		
		//Способ расчета (LIBFPTR_PARAM_PAYMENT_TYPE) может принимать следующие значения:
		//LIBFPTR_PT_CASH - наличными
		//LIBFPTR_PT_ELECTRONICALLY - безналичными
		//LIBFPTR_PT_PREPAID - предварительная оплата (аванс)
		//LIBFPTR_PT_CREDIT - последующая оплата (кредит)
		//LIBFPTR_PT_OTHER - иная форма оплаты (встречное предоставление)
		//LIBFPTR_PT_6 - способ расчета №6
		//LIBFPTR_PT_7 - способ расчета №7
		//LIBFPTR_PT_8 - способ расчета №8
		//LIBFPTR_PT_9 - способ расчета №9
		//LIBFPTR_PT_10 - способ расчета №10	
		//fptr.setParam( fptr.LIBFPTR_PARAM_PAYMENT_TYPE, fptr.LIBFPTR_PT_PREPAID);	
		//fptr.setParam(fptr.LIBFPTR_PARAM_SUM, док.СуммаВзаиморасчетов);
	    //fptr.cashIncome();	
	    //fptr.closeReceipt();	
			
		// Сумма налога TaxSumm. Если передаётся 0, то ККТ считает самостоятельно по TaxTypeNumber и TaxMode. В противном случае в ОФД отправляется переданная сумма, но при значении настройки Т2Р1П114 бит 1 = 1 ККТ  бедет осуществлять контроль переданных данных, при чём контроль в будущем нельзя будет отключить (Русинова).
		//fptr.TaxSumm = Окр( (50.33 * 10 / 110 * 100) / 100, 2, 1); 
		//fptr.TaxSumm = тз.СуммаНДС;
		//fptr.TaxSumm = Док.Сумма*Число(Строка(Док.СтавкаНДС))/(100+Число(Строка(Док.СтавкаНДС)));
		
		
		
	ИначеЕсли Док.Сумма > Док.ДокОснование.СуммаВзаиморасчетов Тогда
		Сообщить("сумма ПКО отличается от суммы документа основания:
		|Сумма ПКО = "+Док.Сумма+"
		|Сумма основания = "+Док.ДокОснование.СуммаВзаиморасчетов,"!");
		Возврат "";

	ИначеЕсли Док.Сумма = Док.ДокОснование.СуммаВзаиморасчетов Тогда

	  	тз = СоздатьОбъект("ТаблицаЗначений");
	  	Док.ДокОснование.ВыгрузитьТабличнуюЧасть(тз);
		тз.ВыбратьСтроки();
		Пока тз.ПолучитьСтроку() = 1 Цикл
		
		    fptr.setParam( fptr.LIBFPTR_PARAM_COMMODITY_NAME,  ЗаменитьСпецСимволы(тз.Номенклатура.Наименование));
		    fptr.setParam( fptr.LIBFPTR_PARAM_PRICE, тз.Цена);
		    fptr.setParam( fptr.LIBFPTR_PARAM_QUANTITY, тз.Количество);	    
	
			//1212	Признак предмета расчета	int
			// Признак предмета расчёта. Свойство ItemType может принимать значения:
			// 	1 - товар, за исключением подакцизного товара
			// 	2 - подакцизный товар
			// 	3 - работа
			// 	4 - услуга
			// 	5 - приём ставок при деятельность по организации и проведению азартных игр
			// 	6 - выплата выигрышей в азартных играх
			// 	7 - реализация лотерейных билетов или ставок при деятельность по организации и проведению лотерей
			// 	8 - выплата выигрышей в лотереях
			// 	9 -  прав на использование результатов интеллектуальной деятельности или средств индивидуализации
			// 	10 -  аванс, задаток, предоплата, кредит, взносе в счет оплаты, пени, штраф, вознаграждение, бонус и иной аналогичный предмет расчета
			// 	11 -  предмет расчета, состоящий из предметов, каждому из которых может быть присвоено значение от 0 до 10 (набор)
			// 	12 -  предмет расчета, не относящийся к предметам расчета, которым может быть присвоено значение от 0 до 11
			fptr.setParam( 1212, 10 );
			
			//1214	Признак способа расчета	int
			// Признак способа расчёта. Свойство PaymentMode может принимать значения:
			// 	1 - Полная предварительная оплата до момента передачи предмета расчета
			// 	2 - Частичная предварительная оплата до момента передачи предмета расчета
			// 	3 - Аванс
			// 	4 - Полная оплата, в том числе с учетом аванса (предварительной оплаты) в момент передачи предмета расчета
			// 	5 - Частичная оплата предмета расчета в момент его передачи с последующей оплатой в кредит
			// 	6 - Передача предмета расчета без его оплаты в момент его передачи с последующей оплатой в кредит
			// 	7 - Оплата предмета расчета после его передачи с оплатой в кредит (оплата кредита)
			Попытка
				fptr.setParam( 1214, Док.ФФД_СпособРасчёта  );
			Исключение
				fptr.setParam( 1214, 7 );
			КонецПопытки;		
	
			////1222	Признак агента по предмету расчета	int
			//fptr.setParam( 1222, fptr.LIBFPTR_AT_NONE );
			
			//Регистрация позиции без расчета суммы налога
			fptr.setParam( fptr.LIBFPTR_PARAM_TAX_TYPE, fptr.LIBFPTR_TAX_VAT0);	// !!! НДС не облагается
			//fptr.setParam( fptr.LIBFPTR_PARAM_USE_ONLY_TAX_TYPE, 1);
			
		    Ответ = fptr.registration();		
			Ошибка( Ответ );
	
		//	Если тз.СтавкаНДС = Перечисление.СтавкиНДС.НДС10 Тогда
		//		fptr.setParam( fptr.LIBFPTR_PARAM_DEPARTMENT, 2 );
		//		fptr.setParam( fptr.LIBFPTR_PARAM_TAX_TYPE, fptr.LIBFPTR_TAX_VAT10 );
		//	Иначе //18/20 %
		//		//Константы LIBFPTR_TAX_VAT20 и LIBFPTR_TAX_VAT120 передаются в ККТ теми же значениями, как и LIBFPTR_TAX_VAT18 и LIBFPTR_TAX_VAT118. ПО может работать с любыми из этих констант.
		//		fptr.setParam( fptr.LIBFPTR_PARAM_DEPARTMENT, 3 );
		//		fptr.setParam( fptr.LIBFPTR_PARAM_TAX_TYPE, fptr.LIBFPTR_TAX_VAT20  );
		//	КонецЕсли;
		//
		//	fptr.setParam( fptr.LIBFPTR_PARAM_TAX_SUM, тз.СуммаНДС);
		//    fptr.receiptTax();		
			
		КонецЦикла;

	Иначе
		//Док.Сумма < Док.ДокОснование.СуммаВзаиморасчетов Тогда
		// частичная оплата накладной
		
    	fptr.setParam( fptr.LIBFPTR_PARAM_COMMODITY_NAME,  ЗаменитьСпецСимволы( "ЧАСТИЧНЫЙ РАСЧЕТ И КРЕДИТ товар из мяса птицы №"+ НомерНаПечать(Док.ДокОснование)+" "+ Док.ДокОснование.ДатаДок ) );
	    fptr.setParam( fptr.LIBFPTR_PARAM_PRICE, Док.Сумма);
	    fptr.setParam( fptr.LIBFPTR_PARAM_QUANTITY, 1);	    

		//1212	Признак предмета расчета	int
		// Признак предмета расчёта. Свойство ItemType может принимать значения:
		// 	1 - товар, за исключением подакцизного товара
		// 	2 - подакцизный товар
		// 	3 - работа
		// 	4 - услуга
		// 	5 - приём ставок при деятельность по организации и проведению азартных игр
		// 	6 - выплата выигрышей в азартных играх
		// 	7 - реализация лотерейных билетов или ставок при деятельность по организации и проведению лотерей
		// 	8 - выплата выигрышей в лотереях
		// 	9 -  прав на использование результатов интеллектуальной деятельности или средств индивидуализации
		// 	10 -  аванс, задаток, предоплата, кредит, взносе в счет оплаты, пени, штраф, вознаграждение, бонус и иной аналогичный предмет расчета
		// 	11 -  предмет расчета, состоящий из предметов, каждому из которых может быть присвоено значение от 0 до 10 (набор)
		// 	12 -  предмет расчета, не относящийся к предметам расчета, которым может быть присвоено значение от 0 до 11
		Попытка
			fptr.setParam( 1212, Док.ФФД_ПредметаРасчёта  );
		Исключение
			fptr.setParam( 1212, 10  );
		КонецПопытки;		
		
		//1214	Признак способа расчета	int
		// Признак способа расчёта. Свойство PaymentMode может принимать значения:
		// 	1 - Полная предварительная оплата до момента передачи предмета расчета
		// 	2 - Частичная предварительная оплата до момента передачи предмета расчета
		// 	3 - Аванс
		// 	4 - Полная оплата, в том числе с учетом аванса (предварительной оплаты) в момент передачи предмета расчета
		// 	5 - Частичная оплата предмета расчета в момент его передачи с последующей оплатой в кредит
		// 	6 - Передача предмета расчета без его оплаты в момент его передачи с последующей оплатой в кредит
		// 	7 - Оплата предмета расчета после его передачи с оплатой в кредит (оплата кредита)
		Попытка
			fptr.setParam( 1214, Док.ФФД_СпособРасчёта  );
		Исключение
			fptr.setParam( 1214, 7 );
		КонецПопытки;			

		////1222	Признак агента по предмету расчета	int
		//fptr.setParam( 1222, fptr.LIBFPTR_AT_NONE );
		
		////Регистрация позиции без расчета суммы налога
		fptr.setParam( fptr.LIBFPTR_PARAM_TAX_TYPE, fptr.LIBFPTR_TAX_VAT0);	// !!! НДС не облагается	
		//fptr.setParam( fptr.LIBFPTR_PARAM_USE_ONLY_TAX_TYPE, 1);
		Ответ = fptr.registration();		
		Ошибка( Ответ );
	    

		//Если Док.СтавкаНДС = Перечисление.СтавкиНДС.НДС10 Тогда
		//	fptr.setParam( fptr.LIBFPTR_PARAM_DEPARTMENT, 2 );
		//	fptr.setParam( fptr.LIBFPTR_PARAM_TAX_TYPE, fptr.LIBFPTR_TAX_VAT10 );
		//Иначе //18/20 %
		//	//Константы LIBFPTR_TAX_VAT20 и LIBFPTR_TAX_VAT120 передаются в ККТ теми же значениями, как и LIBFPTR_TAX_VAT18 и LIBFPTR_TAX_VAT118. ПО может работать с любыми из этих констант.
		//	fptr.setParam( fptr.LIBFPTR_PARAM_DEPARTMENT, 3 );
		//	fptr.setParam( fptr.LIBFPTR_PARAM_TAX_TYPE, fptr.LIBFPTR_TAX_VAT20  );
		//КонецЕсли;
		//
		//fptr.setParam( fptr.LIBFPTR_PARAM_TAX_SUM, 0); //При передаче значения 0 рассчитывается автоматически
		//fptr.registration();
	    //fptr.receiptTax();				
		
	КонецЕсли;
		
	fptr.setParam(fptr.LIBFPTR_PARAM_SUM, док.СуммаВзаиморасчетов);
    Ответ = fptr.cashIncome();	
	Ошибка( Ответ );
	
    Ответ = fptr.closeReceipt();
	Ошибка( Ответ );	

	НомерЧека = ПолучитьНомерЧека();
	
	ЗаписатьНомерЧека( док, НомерЧека);
		
	Возврат НомерЧека;	
	
КонецФункции

// ---------- Чек Отгрузки без оплаты (в кредит) без отправки электронного чека покупателю ---------- 
Функция ОтгрузкаБезОплаты( ВыбКасса, Док ) Экспорт

	ОткрытьЧек( ВыбКасса, Док );	
		
  	тз = СоздатьОбъект("ТаблицаЗначений");
  	Док.ВыгрузитьТабличнуюЧасть(тз);
	тз.ВыбратьСтроки();
	Пока тз.ПолучитьСтроку() = 1 Цикл

	    fptr.setParam( fptr.LIBFPTR_PARAM_COMMODITY_NAME,  ЗаменитьСпецСимволы(тз.Номенклатура.Наименование));
	    fptr.setParam( fptr.LIBFPTR_PARAM_PRICE, тз.Цена);
	    fptr.setParam( fptr.LIBFPTR_PARAM_QUANTITY, тз.Количество);	    

		//1212	Признак предмета расчета	int
		// Признак предмета расчёта. Свойство ItemType может принимать значения:
		// 	1 - товар, за исключением подакцизного товара
		// 	2 - подакцизный товар
		// 	3 - работа
		// 	4 - услуга
		// 	5 - приём ставок при деятельность по организации и проведению азартных игр
		// 	6 - выплата выигрышей в азартных играх
		// 	7 - реализация лотерейных билетов или ставок при деятельность по организации и проведению лотерей
		// 	8 - выплата выигрышей в лотереях
		// 	9 -  прав на использование результатов интеллектуальной деятельности или средств индивидуализации
		// 	10 -  аванс, задаток, предоплата, кредит, взносе в счет оплаты, пени, штраф, вознаграждение, бонус и иной аналогичный предмет расчета
		// 	11 -  предмет расчета, состоящий из предметов, каждому из которых может быть присвоено значение от 0 до 10 (набор)
		// 	12 -  предмет расчета, не относящийся к предметам расчета, которым может быть присвоено значение от 0 до 11
		fptr.setParam( 1212, 1  );
		
		//1214	Признак способа расчета	int
		// Признак способа расчёта. Свойство PaymentMode может принимать значения:
		// 	1 - Полная предварительная оплата до момента передачи предмета расчета
		// 	2 - Частичная предварительная оплата до момента передачи предмета расчета
		// 	3 - Аванс
		// 	4 - Полная оплата, в том числе с учетом аванса (предварительной оплаты) в момент передачи предмета расчета
		// 	5 - Частичная оплата предмета расчета в момент его передачи с последующей оплатой в кредит
		// 	6 - Передача предмета расчета без его оплаты в момент его передачи с последующей оплатой в кредит
		// 	7 - Оплата предмета расчета после его передачи с оплатой в кредит (оплата кредита)
		Попытка
			fptr.setParam( 1214, Док.ФФД_СпособРасчёта  );
		Исключение
			fptr.setParam( 1214, 6 );
		КонецПопытки;		

		//1222	Признак агента по предмету расчета	int
		//fptr.setParam( 1222, fptr.LIBFPTR_AT_NONE );
		
		////Регистрация позиции без расчета суммы налога
		//fptr.setParam( fptr.LIBFPTR_PARAM_TAX_TYPE, fptr.LIBFPTR_TAX_VAT0);		
		//fptr.setParamBool( fptr.LIBFPTR_PARAM_USE_ONLY_TAX_TYPE, fptr.TRUE() );		
	    //fptr.registration();		

		//Если тз.СтавкаНДС = Перечисление.СтавкиНДС.НДС10 Тогда
		//	fptr.setParam( fptr.LIBFPTR_PARAM_DEPARTMENT, 2 );
		//	fptr.setParam( fptr.LIBFPTR_PARAM_TAX_TYPE, fptr.LIBFPTR_TAX_VAT10 );
		//Иначе //18/20 %
		//	//Константы LIBFPTR_TAX_VAT20 и LIBFPTR_TAX_VAT120 передаются в ККТ теми же значениями, как и LIBFPTR_TAX_VAT18 и LIBFPTR_TAX_VAT118. ПО может работать с любыми из этих констант.
		//	fptr.setParam( fptr.LIBFPTR_PARAM_DEPARTMENT, 3 );
		//	fptr.setParam( fptr.LIBFPTR_PARAM_TAX_TYPE, fptr.LIBFPTR_TAX_VAT20  );
		//КонецЕсли;
		
		УстановитьСтавкуНДС( док );

		Ответ = fptr.registration();
		Ошибка( Ответ );
		//fptr.setParam( fptr.LIBFPTR_PARAM_TAX_SUM, тз.СуммаНДС);
	    //fptr.receiptTax();		
		
	КонецЦикла;
			
	////Допускается регистрация итога меньше суммы чека, но только в рамках копеек. Т.е., если общая сумма чека равна 1000.57, то можно зарегистрировать итог от 1000.00 до 1000.57.
	////Метод не является обязательным. Если его не использовать, сумма чека будет посчитана автоматически, без округлений копеек.
	//fptr.setParam( fptr.LIBFPTR_PARAM_SUM, док.СуммаВзаиморасчетов);
    //fptr.receiptTotal();
	
	//Способ расчета (LIBFPTR_PARAM_PAYMENT_TYPE) может принимать следующие значения:
	//LIBFPTR_PT_CASH - наличными
	//LIBFPTR_PT_ELECTRONICALLY - безналичными
	//LIBFPTR_PT_PREPAID - предварительная оплата (аванс)
	//LIBFPTR_PT_CREDIT - последующая оплата (кредит)
	//LIBFPTR_PT_OTHER - иная форма оплаты (встречное предоставление)
	//LIBFPTR_PT_6 - способ расчета №6
	//LIBFPTR_PT_7 - способ расчета №7
	//LIBFPTR_PT_8 - способ расчета №8
	//LIBFPTR_PT_9 - способ расчета №9
	//LIBFPTR_PT_10 - способ расчета №10
	fptr.setParam( fptr.LIBFPTR_PARAM_PAYMENT_TYPE, fptr.LIBFPTR_PT_CREDIT);	
	fptr.setParam( fptr.LIBFPTR_PARAM_PAYMENT_SUM, док.СуммаВзаиморасчетов);
	Ответ = fptr.payment();
	Ошибка( Ответ );
	
    Ответ = fptr.closeReceipt();	
	Ошибка( Ответ );
	
	НомерЧека = ПолучитьНомерЧека();
	ЗаписатьНомерЧека( док, НомерЧека );
	Возврат НомерЧека;
КонецФункции


Функция ОформитьЧек( ВыбКасса, Док ) Экспорт

	НомерЧека ="";
	
	Если Док.Вид() = "ПКО" Тогда
			
		НомерЧека = ОПЛАТА( ВыбКасса, Док );
		
	ИначеЕсли Док.Вид() = "Реализация" Тогда
		
		НомерЧека = ОтгрузкаБезОплаты( ВыбКасса, Док );

	Иначе
		Сообщить("Операции с документом = "+Док.Вид()+" не определены","!");
	КонецЕсли;

	Возврат НомерЧека;
КонецФункции

//} =============== Чек ========================

//{ ================  Чек Коррекции ===================================================

//Формирование чека коррекции (ФФД 1.0, 1.05) состоит из следующих операций:
//
//открытие чека и передача реквизитов чека
//регистрация итога
//регистрация налогов на чек (необязательный пункт)
//регистрация оплат (необязательный пункт)
//закрытие чека
//проверка состояния чека
Процедура ОткрытьЧекКоррекции( ВыбКасса, Док )
	
	// отменим чек, если он был открыт
	fptr.cancelReceipt();

	fptr.setParam(1177, Док.Вид()+" №"+Док.НомерДок); 	//Наименование основания для коррекции
    fptr.setParam(1178, Док.ДатаДок); 					//Дата совершения корректируемого расчета
    //fptr.setParam(1179, Док.НомерДок); 					//Номер предписания налогового органа
    fptr.utilFormTlv();
    //correctionInfo = fptr.getParamByteArray(fptr.LIBFPTR_PARAM_TAG_VALUE);

    fptr.setParam(fptr.LIBFPTR_PARAM_RECEIPT_TYPE, fptr.LIBFPTR_RT_SELL_CORRECTION);
    fptr.setParam(1173, 0);
    fptr.setParamByte(1174, fptr.getParamByteArray(fptr.LIBFPTR_PARAM_TAG_VALUE));
    Ответ = fptr.openReceipt();	

	// openCheckCorrection( string strName, DateTime dateDoc, string NalogPredpisanie = "")		
	//Ответ = fptr.openCheckCorrection( Док.Вид()+" №"+Док.НомерДок, Док.ДатаДок )
	
	Ошибка( Ответ );
	
КонецПроцедуры


Процедура ОформитьЧекКоррекции( ВыбКасса, Док ) Экспорт

	ОткрытьЧекКоррекции( ВыбКасса, Док );

	    fptr.setParam( fptr.LIBFPTR_PARAM_COMMODITY_NAME,  "предоплата за мясопродукцию из мяса птицы в ассортименте по договору" );
	    fptr.setParam( fptr.LIBFPTR_PARAM_PRICE, Док.Сумма);
	    fptr.setParam( fptr.LIBFPTR_PARAM_QUANTITY, 1);	    

		//1212	Признак предмета расчета	int
		// Признак предмета расчёта. Свойство ItemType может принимать значения:
		// 	1 - товар, за исключением подакцизного товара
		// 	2 - подакцизный товар
		// 	3 - работа
		// 	4 - услуга
		// 	5 - приём ставок при деятельность по организации и проведению азартных игр
		// 	6 - выплата выигрышей в азартных играх
		// 	7 - реализация лотерейных билетов или ставок при деятельность по организации и проведению лотерей
		// 	8 - выплата выигрышей в лотереях
		// 	9 -  прав на использование результатов интеллектуальной деятельности или средств индивидуализации
		// 	10 -  аванс, задаток, предоплата, кредит, взносе в счет оплаты, пени, штраф, вознаграждение, бонус и иной аналогичный предмет расчета
		// 	11 -  предмет расчета, состоящий из предметов, каждому из которых может быть присвоено значение от 0 до 10 (набор)
		// 	12 -  предмет расчета, не относящийся к предметам расчета, которым может быть присвоено значение от 0 до 11
		Попытка
			fptr.setParam( 1212, Док.ФФД_ПредметаРасчёта  );
		Исключение
			fptr.setParam( 1212, 10  );
		КонецПопытки;		
		
		//1214	Признак способа расчета	int
		// Признак способа расчёта. Свойство PaymentMode может принимать значения:
		// 	1 - Полная предварительная оплата до момента передачи предмета расчета
		// 	2 - Частичная предварительная оплата до момента передачи предмета расчета
		// 	3 - Аванс
		// 	4 - Полная оплата, в том числе с учетом аванса (предварительной оплаты) в момент передачи предмета расчета
		// 	5 - Частичная оплата предмета расчета в момент его передачи с последующей оплатой в кредит
		// 	6 - Передача предмета расчета без его оплаты в момент его передачи с последующей оплатой в кредит
		// 	7 - Оплата предмета расчета после его передачи с оплатой в кредит (оплата кредита)
		Попытка
			fptr.setParam( 1214, Док.ФФД_СпособРасчёта  );
		Исключение
			fptr.setParam( 1214, 2 );
		КонецПопытки;			

		////1222	Признак агента по предмету расчета	int
		//fptr.setParam( 1222, fptr.LIBFPTR_AT_NONE );
		
		////Регистрация позиции без расчета суммы налога
		//fptr.setParam( fptr.LIBFPTR_PARAM_TAX_TYPE, fptr.LIBFPTR_TAX_VAT0);		
		//fptr.setParam( fptr.LIBFPTR_PARAM_USE_ONLY_TAX_TYPE, 1);
		//fptr.registration();		
	    

		УстановитьСтавкуНДС( док );
		
		fptr.setParam( fptr.LIBFPTR_PARAM_TAX_SUM, 0); //При передаче значения 0 рассчитывается автоматически
		Ответ = fptr.registration();		
		Ошибка( Ответ );	
	
	//Если Док.Вид() = "ПКО" Тогда
	//		
	//	ОПЛАТА( Док );
	//	
	//ИначеЕсли Док.Вид() = "Реализация" Тогда
	//	
	//	ОтгрузкаБезОплаты( Док, Сторно );
//
//	Иначе
//		Сообщить("Операции с документом = "+Док.Вид()+" не определены","!");
//	КонецЕсли;
		
КонецПроцедуры


//} ================  Чек Коррекции ===================================================

////******************************************************************************
//// Предопределенная процедура
////
//Процедура ПриОткрытии()
//	
//	
//	ПодключениеФР();
//
//	Если ПустоеЗначение( Сам().Форма.Параметр) = 0 Тогда
//		Док      = Сам().Форма.Параметр.Получить("Контекст");
//		//Устройство = Форма.Параметр.Получить("Устройство");
//		//КолвоКопий = Форма.Параметр.Получить("КоличествоКопий");
//		//СразуНаПринтер = Число(Форма.Параметр.Получить("СразуПечать"));
//
//		Если ТипЗначенияСтр(Док) = "Реализация" Тогда
//			
//			НомерЧека = ОтгрузкаБезОплаты( ВыбКасса, Док );
//			
//		ИначеЕсли ТипЗначенияСтр(Док) = "ПКО" Тогда
//			
//			НомерЧека = ОПЛАТА( Док );
//		
//		КонецЕсли;
//
//		Попытка
//			//НомерЧека =  ПолучитьНомерЧека();
//			Сам().Форма.Параметр.Установить("НомерЧека", НомерЧека);
//			//Форма.Параметр.Установить("НомерЧека", 123);
//		Исключение
//			Сообщить(ОписаниеОшибки());
//			Сам().Форма.Параметр.Установить("НомерЧека", "");
//		КонецПопытки;
//
//		Статусвозврата(0);
//		Возврат;
//	КонецЕсли;
//
//КонецПроцедуры // ПриОткрытии()

Процедура ПриЗакрытии()
	
	fptr.close();
	fptr = "";
	
КонецПроцедуры

//******************************************************************************

//Процедура ИспользоватьЭмулятор()
//	
//	Если ТестовыйРежим=0 Тогда 
//		// создаем объект общего драйвера ККМ
//		// если объект создать не удается генерируется исключение, по которому завершается работа приложения
//		Если ЗагрузитьВнешнююКомпоненту("FPRNM1C.dll") <> 0  Тогда
//			Попытка
//				ECR = СоздатьОбъект("AddIn.FprnM45");
//			исключение
//				Предупреждение("Ошибка при создании объекта AddIn.FprnM45");
//			конецпопытки;
//		Иначе
//			Предупреждение("Ошибка загрузки внешней компоненты FPRNM1C.dll");
//		КонецЕсли;
//	Иначе
//		// создаем объект общего драйвера ККМ
//		// если объект создать не удается генерируется исключение, по которому завершается работа приложения
//		Если ЗагрузитьВнешнююКомпоненту("FPEmulator1C.dll") <> 0  Тогда
//			Попытка
//				ECR = СоздатьОбъект("AddIn.EmulatorFP1C");
//			исключение
//				Предупреждение("Ошибка при создании объекта AddIn.EmulatorFP1C");
//			конецпопытки;
//		Иначе
//			Предупреждение("Ошибка загрузки внешней компоненты FPEmulator1C.dll");
//		КонецЕсли;
//	КонецЕсли;
//
//КонецПроцедуры

Процедура ВерсияДрайвера() Экспорт
	
	Сообщить("Версия "+ fptr.version() );

	fptr.setParam(fptr.LIBFPTR_PARAM_DATA_TYPE, fptr.LIBFPTR_DT_STATUS);
    Ответ = fptr.queryData();	
	Ошибка(Ответ);	
	
	Сообщить("    operatorID      := " + fptr.getParamInt(fptr.LIBFPTR_PARAM_OPERATOR_ID) );
	Сообщить("    logicalNumber   := " + fptr.getParamInt(fptr.LIBFPTR_PARAM_LOGICAL_NUMBER) );
	Сообщить("    shiftState      := " + fptr.getParamInt(fptr.LIBFPTR_PARAM_SHIFT_STATE) );
	Сообщить("    model           := " + fptr.getParamInt(fptr.LIBFPTR_PARAM_MODEL) );
	Сообщить("    mode            := " + fptr.getParamInt(fptr.LIBFPTR_PARAM_MODE) );
	Сообщить("    submode         := " + fptr.getParamInt(fptr.LIBFPTR_PARAM_SUBMODE) );
	Сообщить("    receiptNumber   := " + fptr.getParamInt(fptr.LIBFPTR_PARAM_RECEIPT_NUMBER) );
	Сообщить("    documentNumber  := " + fptr.getParamInt(fptr.LIBFPTR_PARAM_DOCUMENT_NUMBER) );
	Сообщить("    shiftNumber     := " + fptr.getParamInt(fptr.LIBFPTR_PARAM_SHIFT_NUMBER) );
	Сообщить("    receiptType     := " + fptr.getParamInt(fptr.LIBFPTR_PARAM_RECEIPT_TYPE) );
	Сообщить("    lineLength      := " + fptr.getParamInt(fptr.LIBFPTR_PARAM_RECEIPT_LINE_LENGTH) );
	Сообщить("    lineLengthPix   := " + fptr.getParamInt(fptr.LIBFPTR_PARAM_RECEIPT_LINE_LENGTH_PIX) );
	Сообщить("    receiptSum  := " + fptr.getParamDouble(fptr.LIBFPTR_PARAM_RECEIPT_SUM) );
	Сообщить("    isFiscalDevice          := " + fptr.getParamBool(fptr.LIBFPTR_PARAM_FISCAL) );
	Сообщить("    isFiscalFN              := " + fptr.getParamBool(fptr.LIBFPTR_PARAM_FN_FISCAL) );
	Сообщить("    isFNPresent             := " + fptr.getParamBool(fptr.LIBFPTR_PARAM_FN_PRESENT) );
	Сообщить("    isInvalidFN             := " + fptr.getParamBool(fptr.LIBFPTR_PARAM_INVALID_FN) );
	Сообщить("    isCashDrawerOpened      := " + fptr.getParamBool(fptr.LIBFPTR_PARAM_CASHDRAWER_OPENED) );
	Сообщить("    isPaperPresent          := " + fptr.getParamBool(fptr.LIBFPTR_PARAM_RECEIPT_PAPER_PRESENT) );
	Сообщить("    isPaperNearEnd          := " + fptr.getParamBool(fptr.LIBFPTR_PARAM_PAPER_NEAR_END) );
	Сообщить("    isCoverOpened           := " + fptr.getParamBool(fptr.LIBFPTR_PARAM_COVER_OPENED) );
	Сообщить("    isPrinterConnectionLost := " + fptr.getParamBool(fptr.LIBFPTR_PARAM_PRINTER_CONNECTION_LOST) );
	Сообщить("    isPrinterError          := " + fptr.getParamBool(fptr.LIBFPTR_PARAM_PRINTER_ERROR) );
	Сообщить("    isCutError              := " + fptr.getParamBool(fptr.LIBFPTR_PARAM_CUT_ERROR) );
	Сообщить("    isPrinterOverheat       := " + fptr.getParamBool(fptr.LIBFPTR_PARAM_PRINTER_OVERHEAT) );
	Сообщить("    isDeviceBlocked         := " + fptr.getParamBool(fptr.LIBFPTR_PARAM_BLOCKED) );
	Сообщить("    dateTime  := " + fptr.getParamDateTime(fptr.LIBFPTR_PARAM_DATE_TIME) );
	Сообщить("    serialNumber    := " + fptr.getParamString(fptr.LIBFPTR_PARAM_SERIAL_NUMBER) );
	Сообщить("    modelName       := " + fptr.getParamString(fptr.LIBFPTR_PARAM_MODEL_NAME) );
	Сообщить("    firmwareVersion := " + fptr.getParamString(fptr.LIBFPTR_PARAM_UNIT_VERSION) );
	
КонецПроцедуры

//{  -------------- Можно подключить класс --------------------------
Процедура Конструктор()
	
	ПодключениеФР();	
	
КонецПроцедуры

Процедура Деструктор()
	
КонецПроцедуры
//}

// ОШИБКА: отсутствует интерфейс IInitDone
//
//ИмяКомпоненты = "addin_fptr10_x86.dll";
//ИмяКомпоненты = "addin_fptr10_x64.dll";
//ИмяКомпоненты = "fptr10.dll";
//Если ЗагрузитьВнешнююКомпоненту(ИмяКомпоненты) <> 0  Тогда
//
//	Попытка
//		fptr = СоздатьОбъект("AddIn.Fptr10");
//	исключение
//		Сообщить("Ошибка при создании объекта "+ИмяКомпоненты,"!");
//	конецпопытки;
//Иначе
//	Сообщить("Ошибка загрузки внешней компоненты "+ИмяКомпоненты+"
//	|"+ОписаниеОшибки(),"");
//КонецЕсли;
//

ИмяКомпоненты = "AddIn.Fptr10";
//ИмяКомпоненты = "AddIn.Fptr10_kb99";
Сообщить("Подключаем ["+ИмяКомпоненты+"] ");
Попытка
	//ПодключитьВнешнююКомпоненту(ИмяКомпоненты);
	//ЗагрузитьВнешнююКомпоненту(ИмяКомпоненты);
	fptr = СоздатьОбъект(ИмяКомпоненты);
Исключение
	ошибка = "Компонента ["+ИмяКомпоненты+"] не зарегистрирована ";
	Сообщить(Ошибка + ОписаниеОшибки(),"!"); 	
КонецПопытки;

